{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","displayFields","setDisplayFields","色","レベル","コスト","パワー","使用タイミング","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","showModal","setShowModal","outputText","setOutputText","showImportModal","setShowImportModal","importText","setImportText","displayOrder","fieldLabels","isLrigCard","type","includes","useEffect","fetch","concat","process","Date","now","then","res","json","data","handleSearch","keywords","trim","split","filter","Boolean","activeFields","Object","keys","key","result","card","every","kw","regex","RegExp","some","field","value","test","toLowerCase","e","console","error","seen","Set","unique","c","has","add","adjustDeck","cardName","delta","lb","isLrig","maxCount","prev","_prev$cardName","prevCount","count","newCount","Math","max","min","copy","_objectSpread","[object Object]","currentDeck","deckEntries","entries","totalCount","reduce","acc","_ref4","v","lbCount","_ref5","React","createElement","className","placeholder","onChange","target","onKeyDown","onClick","style","marginLeft","checked","handleAddSaba","find","alert","handleOutputClick","getCardNumbers","deck","flatMap","_ref","_cards$find","name","info","Array","fill","lrigList","mainList","lbCards","_ref2","nonLbCards","_ref3","all","fromEntries","join","map","toggleField","toggleDisplayField","i","cursor","href","rel","fontSize","stopPropagation","dangerouslySetInnerHTML","__html","replace","justifyContent","Fragment","margin","values","listStyle","paddingLeft","_ref6","display","alignItems","marginRight","disabled","opacity","position","top","left","right","bottom","backgroundColor","zIndex","padding","borderRadius","width","maxWidth","background","border","readOnly","height","whiteSpace","fontFamily","handleCopy","navigator","clipboard","writeText","catch","marginTop","lines","line","newMain","newLrig","cardNumber","_target$name","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.2c8c33a2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [useRegex, setUseRegex] = useState(false);\n  const [searchFields, setSearchFields] = useState({\n    カード名: true,\n    効果テキスト: true,\n    ライフバースト: false,\n    カード種類: false,\n    カードタイプ: false,\n  });\n  const [displayFields, setDisplayFields] = useState({\n    カード種類: true,\n    カードタイプ: false,\n    色: false,\n    レベル: false,\n    コスト: false,\n    パワー: false,\n    効果テキスト: true,\n    ライフバースト: false,\n    使用タイミング: false,\n  });\n  const [deckMain, setDeckMain] = useState({});\n  const [deckLrig, setDeckLrig] = useState({});\n  const [showMainDeck, setShowMainDeck] = useState(true);\n  const [minimized, setMinimized] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [outputText, setOutputText] = useState(\"\");\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [importText, setImportText] = useState(\"\");\n\n\n  const displayOrder = [\n    \"カード種類\",\n    \"カードタイプ\",\n    \"色\",\n    \"レベル\",\n    \"コスト\",\n    \"パワー\",\n    \"効果テキスト\",\n    \"ライフバースト\",\n    \"使用タイミング\",\n  ];\n\n  const fieldLabels = {\n    カード名: \"カード名\",\n    効果テキスト: \"効果テキスト\",\n    ライフバースト: \"LB\",\n    カード種類: \"種類\",\n    カードタイプ: \"タイプ\",\n    色: \"色\",\n    レベル: \"Lv\",\n    コスト: \"コスト\",\n    パワー: \"パワー\",\n    使用タイミング: \"タイミング\",\n  };\n\n  const isLrigCard = (type) =>\n    [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(type);\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\n      .then((res) => res.json())\n      .then((data) => setCards(data));\n  }, []);\n\n  const handleSearch = () => {\n    const keywords = query.trim().split(/\\s+/).filter(Boolean);\n    const activeFields = Object.keys(searchFields).filter((key) => searchFields[key]);\n\n    const result = cards.filter((card) =>\n      keywords.every((kw) => {\n        try {\n          const regex = useRegex ? new RegExp(kw, \"i\") : null;\n          return activeFields.some((field) => {\n            const value = card[field] || \"\";\n            return useRegex\n              ? regex.test(value)\n              : value.toLowerCase().includes(kw.toLowerCase());\n          });\n        } catch (e) {\n          console.error(\"Invalid regex:\", kw);\n          return false;\n        }\n      })\n    );\n\n    const seen = new Set();\n    const unique = result.filter((c) => {\n      if (seen.has(c[\"カード名\"])) return false;\n      seen.add(c[\"カード名\"]);\n      return true;\n    });\n\n    setFiltered(unique);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") handleSearch();\n  };\n\n  const toggleField = (field) => {\n    setSearchFields((prev) => ({ ...prev, [field]: !prev[field] }));\n  };\n\n  const handleOutputClick = () => {\n    const getCardNumbers = (deck) =>\n     Object.entries(deck).flatMap(([name, info]) =>\n        Array(info.count).fill(\n         cards.find((c) => c[\"カード名\"] === name)?.[\"カード番号\"] || \"UNKNOWN\"\n       )\n      );\n\n    const lrigList = getCardNumbers(deckLrig);\n\n    const mainList = Object.entries(deckMain);\n    const lbCards = mainList.filter(([, info]) => info.ライフバースト && info.ライフバースト !== \"―\");\n    const nonLbCards = mainList.filter(([, info]) => !info.ライフバースト || info.ライフバースト === \"―\");\n\n    const lbList = getCardNumbers(Object.fromEntries(lbCards));\n    const nonLbList = getCardNumbers(Object.fromEntries(nonLbCards));\n\n    const all = [...lrigList, ...lbList, ...nonLbList];\n    setOutputText(all.join(\"\\n\"));\n    setShowModal(true);\n  };\n\n  const handleAddSaba = () => {\n    const card = cards.find((c) => c[\"カード番号\"] === \"WXDi-D03-020\");\n    if (!card) {\n      alert(\"カード WXDi-D03-020 が見つかりませんでした。\");\n      return;\n    }\n\n    setDeckMain((prev) => ({\n      ...prev,\n      [card[\"カード名\"]]: {\n        count: 4,\n        ライフバースト: card[\"ライフバースト\"],\n        カード種類: card[\"カード種類\"]\n      }\n    }));\n  };\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(outputText)\n    .then(() => {\n      alert(\"コピーしました！\");\n    })\n    .catch(() => {\n      alert(\"コピーに失敗しました。\");\n    });\n  };\n\n  const toggleDisplayField = (field) => {\n    setDisplayFields((prev) => ({ ...prev, [field]: !prev[field] }));\n  };\n\n  const adjustDeck = (cardName, delta, type, lb) => {\n    const isLrig = isLrigCard(type);\n    const setDeck = isLrig ? setDeckLrig : setDeckMain;\n    const deck = isLrig ? deckLrig : deckMain;\n    const maxCount = isLrig ? 1 : 4;\n\n    setDeck((prev) => {\n      const prevCount = prev[cardName]?.count || 0;\n      const newCount = Math.max(0, Math.min(maxCount, prevCount + delta));\n      if (newCount === 0) {\n        const copy = { ...prev };\n        delete copy[cardName];\n        return copy;\n      }\n      return {\n        ...prev,\n        [cardName]: { count: newCount, ライフバースト: lb, カード種類: type },\n      };\n    });\n  };\n\n  const currentDeck = showMainDeck ? deckMain : deckLrig;\n  const deckEntries = Object.entries(currentDeck);\n  const totalCount = deckEntries.reduce((acc, [, v]) => acc + v.count, 0);\n  const lbCount = deckEntries.reduce(\n  (acc, [, v]) =>\n    (v.ライフバースト && v.ライフバースト !== \"―\") ? acc + v.count : acc,\n  0\n);\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header-fixed\">\n        <input\n          type=\"text\"\n          placeholder=\"検索...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyDown={handleKeyDown}\n        />\n        <button onClick={handleSearch}>検索</button>\n        <label style={{ marginLeft: \"10px\" }}>\n          <input\n            type=\"checkbox\"\n            checked={useRegex}\n            onChange={() => setUseRegex(!useRegex)}\n          /> 正規表現\n        </label>\n<button style={{ marginLeft: \"16px\" }} onClick={handleAddSaba}>\n  鯖＃\n</button>\n        <button style={{ marginLeft: \"16px\" }} onClick={handleOutputClick}>\n        出力\n        </button>\n          <button style={{ marginLeft: \"8px\" }} onClick={() => setShowImportModal(true)}>\n  インポート\n</button>\n\n        <div className=\"field-controls\">\n          <strong>検索対象:</strong>\n          {Object.keys(searchFields).map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={searchFields[field]}\n                onChange={() => toggleField(field)}\n              /> {fieldLabels[field] || field}\n            </label>\n          ))}\n        </div>\n        <div className=\"field-controls\">\n          <strong>表示項目:</strong>\n          {displayOrder.map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={displayFields[field]}\n                onChange={() => toggleDisplayField(field)}\n              /> {fieldLabels[field] || field}\n            </label>\n          ))}\n        </div>\n        <table className=\"fixed-header-table\">\n          <thead>\n            <tr>\n              <th>カード名</th>\n              {displayOrder\n                .filter((key) => displayFields[key])\n                .map((key) => (\n                  <th key={key}>{fieldLabels[key]}</th>\n                ))}\n            </tr>\n          </thead>\n        </table>\n      </div>\n\n      <div className=\"table-container\">\n        <table className=\"fixed-header-table\">\n          <tbody>\n            {filtered.map((card, i) => (\n              <tr key={i}>\n                <td>\n                  <span\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() =>\n                      adjustDeck(\n                        card[\"カード名\"],\n                        1,\n                        card[\"カード種類\"],\n                        card[\"ライフバースト\"]\n                      )\n                    }\n                  >\n                    {card[\"カード名\"]}\n                  </span>\n                  <a\n                    href={`https://www.takaratomy.co.jp/products/wixoss/library/card/card_detail.php?card_no=${card[\"カード番号\"]}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ marginLeft: \"0.3em\", fontSize: \"0.8em\" }}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    ❔\n                  </a>\n                </td>\n{displayOrder\n  .filter((key) => displayFields[key])\n  .map((key) => (\n    <td\n      key={key}\n      dangerouslySetInnerHTML={{\n        __html: (card[key] || \"\").replace(/\\n/g, \"<br>\")\n      }}\n    />\n  ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n<div className=\"deck-box\">\n  <div className=\"deck-header\" style={{ justifyContent: minimized ? \"flex-end\" : \"space-between\" }}>\n    {!minimized && (\n      <h3>{showMainDeck ? \"現在のメインデッキ\" : \"現在のルリグデッキ\"}</h3>\n    )}\n    <div>\n      {!minimized && (\n        <button onClick={() => setShowMainDeck(!showMainDeck)}>\n          {showMainDeck ? \"ルリグ\" : \"メイン\"}\n        </button>\n      )}\n      <button onClick={() => setMinimized(!minimized)}>\n        {minimized ? \"＋\" : \"－\"}\n      </button>\n    </div>\n  </div>\n\n  {!minimized && (\n    <>\n      <p style={{ margin: 0, fontSize: \"1em\" }}>\n        {showMainDeck\n          ? `ルリグデッキ：${Object.values(deckLrig).reduce((acc, v) => acc + v.count, 0)}枚`\n          : `メインデッキ：${Object.values(deckMain).reduce((acc, v) => acc + v.count, 0)}枚`}\n      </p>\n      <p>枚数: {totalCount} {showMainDeck && `/ LB: ${lbCount}`}</p>\n      <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\n        {deckEntries.map(([name, info]) => (\n          <li\n            key={name}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n            }}\n          >\n            <span>{info.ライフバースト && info.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\n            <span style={{ marginLeft: \"0.5em\", display: \"flex\", alignItems: \"center\" }}>\n              <button\n                onClick={() =>\n                  adjustDeck(name, -1, info.カード種類, info.ライフバースト)\n                }\n                style={{ marginRight: 4 }}\n              >\n                －\n              </button>\n              <span>×{info.count}</span>\n              {!isLrigCard(info.カード種類) && (\n                <button\n                  onClick={() =>\n                    adjustDeck(name, 1, info.カード種類, info.ライフバースト)\n                  }\n                  disabled={info.count >= 4}\n                  style={{ marginLeft: 4, opacity: info.count >= 4 ? 0.5 : 1 }}\n                >\n                  ＋\n                </button>\n              )}\n            </span>\n          </li>\n        ))}\n      </ul>\n    </>\n  )}\n</div>\n\n\n{showModal && (\n  <div style={{\n    position: \"fixed\",\n    top: 0, left: 0, right: 0, bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    zIndex: 1000\n  }}>\n    <div style={{\n      backgroundColor: \"white\",\n      padding: \"20px\",\n      borderRadius: \"8px\",\n      width: \"80%\",\n      maxWidth: \"500px\",\n      position: \"relative\"\n    }}>\n      <button onClick={() => setShowModal(false)} style={{\n        position: \"absolute\",\n        top: \"10px\",\n        right: \"10px\",\n        background: \"none\",\n        border: \"none\",\n        fontSize: \"1.2em\",\n        cursor: \"pointer\"\n      }}>×</button>\n      <h3>デッキ出力</h3>\n      <textarea\n        value={outputText}\n        readOnly\n        style={{ width: \"100%\", height: \"300px\", whiteSpace: \"pre\", fontFamily: \"monospace\" }}\n      />\n      <button\n  onClick={handleCopy}\n  style={{\n    marginTop: \"10px\",\n    padding: \"6px 12px\",\n    fontSize: \"1em\",\n    cursor: \"pointer\"\n  }}\n>\n  コピー\n</button>\n    </div>\n  </div>\n)}\n{showImportModal && (\n  <div style={{\n    position: \"fixed\",\n    top: 0, left: 0, right: 0, bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    zIndex: 1000\n  }}>\n    <div style={{\n      backgroundColor: \"white\",\n      padding: \"20px\",\n      borderRadius: \"8px\",\n      width: \"80%\",\n      maxWidth: \"500px\",\n      position: \"relative\"\n    }}>\n      <button onClick={() => setShowImportModal(false)} style={{\n        position: \"absolute\",\n        top: \"10px\",\n        right: \"10px\",\n        background: \"none\",\n        border: \"none\",\n        fontSize: \"1.2em\",\n        cursor: \"pointer\"\n      }}>×</button>\n      <h3>デッキインポート</h3>\n      <textarea\n        value={importText}\n        onChange={(e) => setImportText(e.target.value)}\n        placeholder=\"カード番号を1行ずつ貼り付けてください\"\n        style={{ width: \"100%\", height: \"300px\", whiteSpace: \"pre\", fontFamily: \"monospace\" }}\n      />\n      <button\n        onClick={() => {\n          const lines = importText\n            .split(/\\r?\\n/)\n            .map((line) => line.trim())\n            .filter(Boolean);\n\n          const newMain = {};\n          const newLrig = {};\n\n          for (const cardNumber of lines) {\n            const card = cards.find((c) => c[\"カード番号\"] === cardNumber);\n            if (!card) continue;\n\n            const name = card[\"カード名\"];\n            const isLrig = isLrigCard(card[\"カード種類\"]);\n\n            const target = isLrig ? newLrig : newMain;\n            const max = isLrig ? 1 : 4;\n            const prevCount = target[name]?.count || 0;\n            if (prevCount < max) {\n              target[name] = {\n                count: prevCount + 1,\n                ライフバースト: card[\"ライフバースト\"],\n                カード種類: card[\"カード種類\"]\n              };\n            }\n          }\n\n          setDeckMain(newMain);\n          setDeckLrig(newLrig);\n          setShowImportModal(false);\n        }}\n        style={{ marginTop: \"10px\", padding: \"6px 12px\", fontSize: \"1em\", cursor: \"pointer\" }}\n      >\n        読み込み\n      </button>\n    </div>\n  </div>\n)}\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}