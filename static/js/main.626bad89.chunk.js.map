{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","fieldList","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","useEffect","fetch","concat","process","Date","now","then","res","json","data","adjustMainDeck","name","delta","prev","_updated$name","updated","_objectSpread","newCount","count","deck","totalCards","Object","values","reduce","sum","item","totalLB","sortedDeckEntries","entries","sort","_ref","_ref2","aName","aData","bName","bData","aHasLB","React","createElement","style","maxHeight","overflowY","type","placeholder","value","onChange","e","target","margin","padding","width","onClick","handleSearch","keywords","trim","split","filter","Boolean","activeFields","field","result","card","every","kw","regex","RegExp","some","test","toLowerCase","includes","console","error","seen","Set","unique","c","has","add","log","map","marginBottom","marginLeft","checked","key","[object Object]","borderCollapse","index","_deck$name","isLrigDeckCard","setDeck","addToDeck","cursor","position","bottom","right","background","border","borderRadius","height","boxShadow","textAlign","display","justifyContent","alignItems","Fragment","length","listStyle","paddingLeft","_ref3","marginRight","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.626bad89.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [useRegex, setUseRegex] = useState(false);\n  const [deckMain, setDeckMain] = useState({});\n  const [deckLrig, setDeckLrig] = useState({});\n  const [showMainDeck, setShowMainDeck] = useState(true);\n  const [minimized, setMinimized] = useState(false);\n\n  const fieldList = [\"カード名\", \"効果テキスト\", \"ライフバースト\", \"カード種類\", \"カードタイプ\"];\n  const [searchFields, setSearchFields] = useState({\n    カード名: true,\n    効果テキスト: true,\n    ライフバースト: false,\n    カード種類: false,\n    カードタイプ: false,\n  });\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\n      .then((res) => res.json())\n      .then((data) => setCards(data));\n  }, []);\n\n  const handleSearch = () => {\n    const keywords = query.trim().split(/\\s+/).filter(Boolean);\n    const activeFields = fieldList.filter((field) => searchFields[field]);\n\n    const result = cards.filter((card) =>\n      keywords.every((kw) => {\n        try {\n          const regex = useRegex ? new RegExp(kw, \"i\") : null;\n          return activeFields.some((field) => {\n            const value = card[field] || \"\";\n            return useRegex\n              ? regex.test(value)\n              : value.toLowerCase().includes(kw.toLowerCase());\n          });\n        } catch (e) {\n          console.error(\"Invalid regex:\", kw);\n          return false;\n        }\n      })\n    );\n\n    const seen = new Set();\n    const unique = result.filter((c) => {\n      if (seen.has(c[\"カード名\"])) return false;\n      seen.add(c[\"カード名\"]);\n      return true;\n    });\n\n    console.log(\"検索結果のカード番号:\", unique.map(c => c[\"カード番号\"]));\n    setFiltered(unique);\n  };\n\n  const addToDeck = (card) => {\n    const isLrigDeckCard = [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(card[\"カード種類\"]);\n    const setDeck = isLrigDeckCard ? setDeckLrig : setDeckMain;\n    const deck = isLrigDeckCard ? deckLrig : deckMain;\n    const name = card[\"カード名\"];\n    const count = deck[name]?.count || 0;\n    if (isLrigDeckCard && count >= 1) return;\n    if (!isLrigDeckCard && count >= 4) return;\n    setDeck({\n      ...deck,\n      [name]: {\n        count: count + 1,\n        ライフバースト: card[\"ライフバースト\"],\n        カード種類: card[\"カード種類\"]\n      },\n    });\n  };\n\n  const adjustMainDeck = (name, delta) => {\n    setDeckMain((prev) => {\n      const updated = { ...prev };\n      const count = updated[name]?.count || 0;\n      const newCount = count + delta;\n      if (newCount > 0 && newCount <= 4) {\n        updated[name].count = newCount;\n      } else if (newCount <= 0) {\n        delete updated[name];\n      }\n      return updated;\n    });\n  };\n\n  const deck = showMainDeck ? deckMain : deckLrig;\n  const totalCards = Object.values(deck).reduce((sum, item) => sum + item.count, 0);\n  const totalLB = Object.values(deck).reduce(\n    (sum, item) => sum + (item.ライフバースト && item.ライフバースト !== \"―\" ? item.count : 0),\n    0\n  );\n\n  const sortedDeckEntries = Object.entries(deck).sort(([aName, aData], [bName, bData]) => {\n    const aHasLB = aData.ライフバースト && aData.ライフバースト !== \"―\";\n    const bHasLB = bData.ライフバースト && bData.ライフバースト !== \"―\";\n    if (aHasLB === bHasLB) return 0;\n    return aHasLB ? -1 : 1;\n  });\n\n  return (\n    <div>\n      <div style={{ maxHeight: \"70vh\", overflowY: \"auto\" }}>\n        <input\n          type=\"text\"\n          placeholder=\"検索...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ margin: \"10px\", padding: \"5px\", width: \"80%\" }}\n        />\n        <button onClick={handleSearch} style={{ padding: \"6px 12px\", marginBottom: \"10px\" }}>\n          検索\n        </button>\n        <label style={{ marginLeft: \"10px\" }}>\n          <input\n            type=\"checkbox\"\n            checked={useRegex}\n            onChange={() => setUseRegex(!useRegex)}\n          /> 正規表現\n        </label>\n        <div style={{ margin: \"10px 0\" }}>\n          <strong>検索対象:</strong>\n          {fieldList.map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={searchFields[field]}\n                onChange={() => setSearchFields({ ...searchFields, [field]: !searchFields[field] })}\n              /> {field}\n            </label>\n          ))}\n        </div>\n        <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n          <thead>\n            <tr>\n              <th>カード名</th>\n              <th>種類</th>\n              <th>タイプ</th>\n              <th>色</th>\n              <th>Lv</th>\n              <th>コスト</th>\n              <th>パワー</th>\n              <th>効果テキスト</th>\n              <th>LB</th>\n              <th>タイミング</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filtered.map((card, index) => (\n              <tr key={index} onClick={() => addToDeck(card)} style={{ cursor: \"pointer\" }}>\n                <td>{card[\"カード名\"]}</td>\n                <td>{card[\"カード種類\"]}</td>\n                <td>{card[\"カードタイプ\"]}</td>\n                <td>{card[\"色\"]}</td>\n                <td>{card[\"レベル\"]}</td>\n                <td>{card[\"コスト\"]}</td>\n                <td>{card[\"パワー\"]}</td>\n                <td>{card[\"効果テキスト\"]}</td>\n                <td>{card[\"ライフバースト\"]}</td>\n                <td>{card[\"使用タイミング\"]}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div style={{\n        position: \"fixed\",\n        bottom: \"20px\",\n        right: \"20px\",\n        background: \"#fff\",\n        border: \"1px solid #ccc\",\n        padding: \"1em\",\n        borderRadius: \"8px\",\n        width: \"300px\",\n        height: minimized ? \"auto\" : \"400px\",\n        overflowY: \"auto\",\n        boxShadow: \"0 0 10px rgba(0,0,0,0.2)\",\n        textAlign: \"left\"\n      }}>\n        <h3 style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n          <span>\n            現在の{showMainDeck ? \"メインデッキ\" : \"ルリグデッキ\"}\n            <button onClick={() => setShowMainDeck(!showMainDeck)} style={{ marginLeft: \"0.5em\" }}>\n              {showMainDeck ? \"ルリグ\" : \"メイン\"}\n            </button>\n          </span>\n          <button onClick={() => setMinimized(!minimized)}>\n            {minimized ? \"＋\" : \"－\"}\n          </button>\n        </h3>\n        {!minimized && (\n          <>\n            {showMainDeck ? (\n              <p>枚数: {totalCards} / LB: {totalLB}</p>\n            ) : (\n              <p>枚数: {totalCards}</p>\n            )}\n            {sortedDeckEntries.length > 0 ? (\n              <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\n                {sortedDeckEntries.map(([name, data]) => (\n                  <li\n                    key={name}\n                    style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\n                  >\n                    <span>{data.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\n                    <span style={{ marginLeft: \"0.5em\", display: \"flex\", alignItems: \"center\" }}>\n                      {showMainDeck && (\n                        <>\n                          <button onClick={() => adjustMainDeck(name, -1)} style={{ marginRight: \"4px\" }}>－</button>\n                          <span>×{data.count}</span>\n                          <button onClick={() => adjustMainDeck(name, 1)} style={{ marginLeft: \"4px\" }}>＋</button>\n                        </>\n                      )}\n                      {!showMainDeck && <span>×{data.count}</span>}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p>カードが追加されていません。</p>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}