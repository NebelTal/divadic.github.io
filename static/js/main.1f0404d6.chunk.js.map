{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","displayFields","setDisplayFields","色","レベル","コスト","パワー","使用タイミング","useEffect","fetch","concat","process","Date","now","then","res","json","data","handleSearch","q","toLowerCase","activeFields","Object","entries","filter","_ref","_","checked","map","_ref2","field","result","card","some","includes","uniqueByCardName","seen","Set","has","add","push","console","log","c","React","createElement","className","style","padding","fontFamily","marginBottom","width","type","placeholder","value","onChange","e","target","onKeyDown","key","keys","marginRight","_objectSpread","[object Object]","toggleField","toggleDisplayField","onClick","length","border","cellPadding","i","_ref3","_ref4","j","val","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1f0404d6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [searchFields, setSearchFields] = useState({\n    カード名: true,\n    効果テキスト: true,\n    ライフバースト: false,\n    カード種類: false,\n    カードタイプ: false,\n  });\n  const [displayFields, setDisplayFields] = useState({\n    効果テキスト: true,\n    ライフバースト: true,\n    カード種類: true,\n    カードタイプ: true,\n    色: true,\n    レベル: true,\n    コスト: true,\n    パワー: true,\n    使用タイミング: true,\n  });\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\n      .then((res) => res.json())\n      .then((data) => setCards(data));\n  }, []);\n\n  const handleSearch = () => {\n    const q = query.toLowerCase();\n    const activeFields = Object.entries(searchFields)\n      .filter(([_, checked]) => checked)\n      .map(([field]) => field);\n\n    const result = cards.filter((card) =>\n      activeFields.some((field) =>\n        (card[field] || \"\").toLowerCase().includes(q)\n      )\n    );\n\n    const uniqueByCardName = [];\n    const seen = new Set();\n    for (const card of result) {\n      if (!seen.has(card[\"カード名\"])) {\n        seen.add(card[\"カード名\"]);\n        uniqueByCardName.push(card);\n      }\n    }\n\n    console.log(\"検索結果のカード番号:\", uniqueByCardName.map(c => c[\"カード番号\"]));\n\n    setFiltered(uniqueByCardName);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  const toggleField = (field) => {\n    setSearchFields({ ...searchFields, [field]: !searchFields[field] });\n  };\n\n  const toggleDisplayField = (field) => {\n    setDisplayFields({ ...displayFields, [field]: !displayFields[field] });\n  };\n\n  return (\n    <div className=\"App\" style={{ padding: \"2rem\", fontFamily: \"sans-serif\" }}>\n      <h1>WIXOSS カード検索</h1>\n      <input\n        style={{ marginBottom: \"1rem\", padding: \"0.5em\", width: \"300px\" }}\n        type=\"text\"\n        placeholder=\"検索ワードを入力\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        onKeyDown={handleKeyDown}\n      />\n\n      <div style={{ marginBottom: \"1rem\" }}>\n        <strong>検索対象:</strong>\n        {Object.keys(searchFields).map((field) => (\n          <label key={field} style={{ marginRight: \"1em\" }}>\n            <input\n              type=\"checkbox\"\n              checked={searchFields[field]}\n              onChange={() => toggleField(field)}\n            />\n            {field}\n          </label>\n        ))}\n      </div>\n\n      <div style={{ marginBottom: \"1rem\" }}>\n        <strong>表示項目:</strong>\n        {Object.keys(displayFields).map((field) => (\n          <label key={field} style={{ marginRight: \"1em\" }}>\n            <input\n              type=\"checkbox\"\n              checked={displayFields[field]}\n              onChange={() => toggleDisplayField(field)}\n            />\n            {field}\n          </label>\n        ))}\n      </div>\n\n      <button onClick={handleSearch}>検索</button>\n\n      {filtered.length > 0 && (\n        <table border=\"1\" cellPadding=\"4\">\n          <thead>\n            <tr>\n              <th>カード名</th>\n              {Object.keys(filtered[0])\n                .filter((key) => key !== \"カード番号\" && key !== \"カード名\" && displayFields[key])\n                .map((key, i) => (\n                  <th key={i}>{key}</th>\n                ))}\n            </tr>\n          </thead>\n          <tbody>\n            {filtered.map((card, i) => (\n              <tr key={i}>\n                <td>{card[\"カード名\"]}</td>\n                {Object.entries(card)\n                  .filter(([key]) => key !== \"カード番号\" && key !== \"カード名\" && displayFields[key])\n                  .map(([_, val], j) => (\n                    <td key={j}>{val}</td>\n                  ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}