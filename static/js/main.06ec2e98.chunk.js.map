{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","displayFields","setDisplayFields","色","レベル","コスト","パワー","使用タイミング","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","showModal","setShowModal","outputText","setOutputText","showSubmitModal","setShowSubmitModal","submitText","setSubmitText","showImportModal","setShowImportModal","importText","setImportText","displayOrder","fieldLabels","isLrigCard","type","includes","useEffect","fetch","concat","process","Date","now","then","res","json","data","handleSearch","keywords","trim","split","filter","Boolean","activeFields","Object","keys","key","result","card","every","kw","regex","RegExp","some","field","value","test","toLowerCase","e","console","error","seen","Set","unique","c","has","add","adjustDeck","cardName","delta","lb","isLrig","maxCount","prev","_prev$cardName","prevCount","count","newCount","Math","max","min","copy","_objectSpread","[object Object]","currentDeck","deckEntries","entries","totalCount","reduce","acc","_ref6","v","lbCount","_ref7","React","createElement","className","placeholder","onChange","target","onKeyDown","onClick","style","marginLeft","checked","handleAddSaba","find","alert","handleOutputClick","getCardNumbers","deck","flatMap","_ref","_cards$find","name","info","Array","fill","lrigList","mainList","lbCards","_ref2","nonLbCards","_ref3","all","fromEntries","join","handleTeishutsuClick","getCardEntries","_ref4","map","lines","_ref5","num","toggleField","toggleDisplayField","i","cursor","href","rel","fontSize","stopPropagation","dangerouslySetInnerHTML","__html","replace","justifyContent","Fragment","margin","values","listStyle","paddingLeft","_ref8","display","alignItems","marginRight","disabled","opacity","position","top","left","right","bottom","backgroundColor","zIndex","padding","borderRadius","width","maxWidth","background","border","readOnly","height","whiteSpace","fontFamily","handleCopy","navigator","clipboard","writeText","catch","marginTop","line","newMain","newLrig","cardNumber","_target$name","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"mMAkqBeA,MA/pBf,WACE,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAUC,GAAeF,mBAAS,KAClCG,EAAOC,GAAYJ,mBAAS,KAC5BK,EAAUC,GAAeN,oBAAS,IAClCO,EAAcC,GAAmBR,mBAAS,CAC/CS,4BAAM,EACNC,wCAAQ,EACRC,8CAAS,EACTC,kCAAO,EACPC,wCAAQ,KAEHC,EAAeC,GAAoBf,mBAAS,CACjDY,kCAAO,EACPC,wCAAQ,EACRG,UAAG,EACHC,sBAAK,EACLC,sBAAK,EACLC,sBAAK,EACLT,wCAAQ,EACRC,8CAAS,EACTS,8CAAS,KAEJC,EAAUC,GAAetB,mBAAS,KAClCuB,EAAUC,GAAexB,mBAAS,KAClCyB,EAAcC,GAAmB1B,oBAAS,IAC1C2B,EAAWC,GAAgB5B,oBAAS,IACpC6B,EAAWC,GAAgB9B,oBAAS,IACpC+B,EAAYC,GAAiBhC,mBAAS,KACtCiC,EAAiBC,GAAsBlC,oBAAS,IAChDmC,EAAYC,GAAiBpC,mBAAS,KACtCqC,EAAiBC,GAAsBtC,oBAAS,IAChDuC,EAAYC,GAAiBxC,mBAAS,IAEvCyC,EAAe,CACnB,iCACA,uCACA,SACA,qBACA,qBACA,qBACA,uCACA,6CACA,8CAGIC,EAAc,CAClBjC,2BAAM,2BACNC,uCAAQ,uCACRC,6CAAS,KACTC,iCAAO,eACPC,uCAAQ,qBACRG,SAAG,SACHC,qBAAK,KACLC,qBAAK,qBACLC,qBAAK,qBACLC,6CAAS,kCAGLuB,EAAcC,GAClB,CAAC,qBAAO,6CAAW,qBAAO,sBAAOC,SAASD,GAE5CE,oBAAU,KACRC,MAAK,GAAAC,OAAIC,qBAAsB,kBAAAD,OAAiBE,KAAKC,QAClDC,KAAMC,GAAQA,EAAIC,QAClBF,KAAMG,GAASxD,EAASwD,KAC1B,IAEH,MAAMC,EAAeA,KACnB,MAAMC,EAAWtD,EAAMuD,OAAOC,MAAM,OAAOC,OAAOC,SAC5CC,EAAeC,OAAOC,KAAKzD,GAAcqD,OAC5CK,GAAQ1D,EAAa0D,IAGlBC,EAASpE,EAAM8D,OAAQO,GAC3BV,EAASW,MAAOC,IACd,IACE,MAAMC,EAAQjE,EAAW,IAAIkE,OAAOF,EAAI,KAAO,KAC/C,OAAOP,EAAaU,KAAMC,IACxB,MAAMC,EAAQP,EAAKM,IAAU,GAC7B,OAAOpE,EACHiE,EAAMK,KAAKD,GACXA,EAAME,cAAc/B,SAASwB,EAAGO,iBAEtC,MAAOC,GAEP,OADAC,QAAQC,MAAM,iBAAkBV,IACzB,MAKPW,EAAO,IAAIC,IACXC,EAAShB,EAAON,OAAQuB,IACxBH,EAAKI,IAAID,EAAE,+BACfH,EAAKK,IAAIF,EAAE,8BACJ,IAGTjF,EAAYgF,IA6FRI,EAAaA,CAACC,EAAUC,EAAO5C,EAAM6C,KACzC,MAAMC,EAAS/C,EAAWC,GAGpB+C,EAAWD,EAAS,EAAI,GAFdA,EAASlE,EAAcF,GAI9BsE,IAAS,IAAAC,EAChB,MAAMC,GAA0B,QAAdD,EAAAD,EAAKL,UAAS,IAAAM,OAAA,EAAdA,EAAgBE,QAAS,EACrCC,EAAWC,KAAKC,IAAI,EAAGD,KAAKE,IAAIR,EAAUG,EAAYN,IAC5D,GAAiB,IAAbQ,EAAgB,CAClB,MAAMI,EAAIC,YAAA,GAAQT,GAElB,cADOQ,EAAKb,GACLa,EAET,OAAAC,wBAAA,GACKT,GAAI,IACPU,CAACf,GAAW,CAAEQ,MAAOC,EAAUrF,6CAAS8E,EAAI7E,iCAAOgC,QAKnD2D,EAAc9E,EAAeJ,EAAWE,EACxCiF,EAAczC,OAAO0C,QAAQF,GAC7BG,EAAaF,EAAYG,OAAO,CAACC,EAAGC,KAAA,IAAE,CAAGC,GAAED,EAAA,OAAKD,EAAME,EAAEf,OAAO,GAC/DgB,EAAUP,EAAYG,OAC1B,CAACC,EAAGI,KAAA,IAAE,CAAGF,GAAEE,EAAA,OACTF,EAAEnG,4CAAyB,WAAdmG,EAAEnG,2CACXiG,EAAME,EAAEf,MACRa,GACN,GAGF,OACEK,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,OAAKC,UAAU,gBACbF,IAAAC,cAAA,SACEtE,KAAK,OACLwE,YAAY,kBACZ1C,MAAOvE,EACPkH,SAAWxC,GAAMzE,EAASyE,EAAEyC,OAAO5C,OACnC6C,UAlIe1C,IACP,UAAVA,EAAEZ,KAAiBT,OAmInByD,IAAAC,cAAA,UAAQM,QAAShE,GAAc,gBAC/ByD,IAAAC,cAAA,SAAOO,MAAO,CAAEC,WAAY,SAC1BT,IAAAC,cAAA,SACEtE,KAAK,WACL+E,QAAStH,EACTgH,SAAUA,IAAM/G,GAAaD,KAC5B,IAAI,4BAGT4G,IAAAC,cAAA,UAAQO,MAAO,CAAEC,WAAY,QAAUF,QAnFvBI,KACpB,MAAMzD,EAAOrE,EAAM+H,KAAM1C,GAAqB,iBAAfA,EAAE,mCAC5BhB,EAKL7C,EAAasE,GAAIS,wBAAA,GACZT,GAAI,IACPU,CAACnC,EAAK,6BAAU,CACd4B,MAAO,EACPpF,6CAASwD,EAAK,8CACdvD,iCAAOuD,EAAK,sCATd2D,MAAM,8GAgF2D,gBAG/Db,IAAAC,cAAA,UAAQO,MAAO,CAAEC,WAAY,QAAUF,QAxInBO,KACxB,MAAMC,EAAkBC,GACtBlE,OAAO0C,QAAQwB,GAAMC,QAAQC,IAAA,IAAAC,EAAA,IAAEC,EAAMC,GAAKH,EAAA,OACxCI,MAAMD,EAAKvC,OAAOyC,MACqB,QAArCJ,EAAAtI,EAAM+H,KAAM1C,GAAMA,EAAE,8BAAYkD,UAAK,IAAAD,OAAA,EAArCA,EAAwC,oCACtC,aAIFK,EAAWT,EAAezG,GAE1BmH,EAAW3E,OAAO0C,QAAQpF,GAC1BsH,EAAUD,EAAS9E,OACvBgF,IAAA,IAAC,CAAGN,GAAKM,EAAA,OAAKN,EAAK3H,4CAA4B,WAAjB2H,EAAK3H,6CAE/BkI,EAAaH,EAAS9E,OAC1BkF,IAAA,IAAC,CAAGR,GAAKQ,EAAA,OAAMR,EAAK3H,4CAA4B,WAAjB2H,EAAK3H,6CAMhCoI,EAAM,IAAIN,KAHDT,EAAejE,OAAOiF,YAAYL,OAC/BX,EAAejE,OAAOiF,YAAYH,KAGpD7G,EAAc+G,EAAIE,KAAK,OACvBnH,GAAa,KAgH0D,gBAGnEmF,IAAAC,cAAA,UACEO,MAAO,CAAEC,WAAY,OACrBF,QAlHqB0B,KAC3B,MAAMC,EAAkBlB,GACtBlE,OAAO0C,QAAQwB,GAAMC,QAAQkB,IAAA,IAAEf,EAAMC,GAAKc,EAAA,OACxCb,MAAMD,EAAKvC,OAAOsD,IAAI,KACpB,MAAMlF,EAAOrE,EAAM+H,KAAM1C,GAAMA,EAAE,8BAAYkD,GAC7C,MAAO,EACD,OAAJlE,QAAI,IAAJA,OAAI,EAAJA,EAAO,oCAAY,WACf,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAO,8BAAWkE,OASpBiB,EAFa,IAFCH,EAAe5H,MACf4H,EAAe9H,IAGVgI,IACvBE,IAAA,IAAEC,EAAKnB,GAAKkB,EAAA,SAAAvG,OAAQwG,EAAG,MAAAxG,OAAKqF,KAE9BjG,EAAckH,EAAML,KAAK,OACzB/G,GAAmB,KA+Fd,sBAGD+E,IAAAC,cAAA,UACEO,MAAO,CAAEC,WAAY,OACrBF,QAASA,IAAMlF,GAAmB,IACnC,kCAID2E,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,cAAQ,6BACPnD,OAAOC,KAAKzD,GAAc8I,IAAK5E,GAC9BwC,IAAAC,cAAA,SAAOjD,IAAKQ,EAAOgD,MAAO,CAAEC,WAAY,SACtCT,IAAAC,cAAA,SACEtE,KAAK,WACL+E,QAASpH,EAAakE,GACtB4C,SAAUA,IAnKH5C,KACnBjE,EAAiBoF,GAAIS,wBAAA,GAAWT,GAAI,IAAEU,CAAC7B,IAASmB,EAAKnB,OAkKzBgF,CAAYhF,KAC3B,IACF/B,EAAY+B,IAAUA,KAI7BwC,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAAA,cAAQ,6BACPzE,EAAa4G,IAAK5E,GACjBwC,IAAAC,cAAA,SAAOjD,IAAKQ,EAAOgD,MAAO,CAAEC,WAAY,SACtCT,IAAAC,cAAA,SACEtE,KAAK,WACL+E,QAAS7G,EAAc2D,GACvB4C,SAAUA,IA9FI5C,KAC1B1D,EAAkB6E,GAAIS,wBAAA,GAAWT,GAAI,IAAEU,CAAC7B,IAASmB,EAAKnB,OA6F1BiF,CAAmBjF,KAClC,IACF/B,EAAY+B,IAAUA,KAI7BwC,IAAAC,cAAA,SAAOC,UAAU,sBACfF,IAAAC,cAAA,aACED,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,4BACHzE,EACEmB,OAAQK,GAAQnD,EAAcmD,IAC9BoF,IAAKpF,GACJgD,IAAAC,cAAA,MAAIjD,IAAKA,GAAMvB,EAAYuB,SAOvCgD,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,SAAOC,UAAU,sBACfF,IAAAC,cAAA,aACGjH,EAASoJ,IAAI,CAAClF,EAAMwF,IACnB1C,IAAAC,cAAA,MAAIjD,IAAK0F,GACP1C,IAAAC,cAAA,UACED,IAAAC,cAAA,QACEO,MAAO,CAAEmC,OAAQ,WACjBpC,QAASA,IACPlC,EACEnB,EAAK,4BACL,EACAA,EAAK,kCACLA,EAAK,gDAIRA,EAAK,6BAER8C,IAAAC,cAAA,KACE2C,KAAI,qFAAA7G,OAAuFmB,EAAK,mCAChGmD,OAAO,SACPwC,IAAI,sBACJrC,MAAO,CAAEC,WAAY,QAASqC,SAAU,SACxCvC,QAAU3C,GAAMA,EAAEmF,mBACnB,WAIFvH,EACEmB,OAAQK,GAAQnD,EAAcmD,IAC9BoF,IAAKpF,GACJgD,IAAAC,cAAA,MACEjD,IAAKA,EACLgG,wBAAyB,CACvBC,QAAS/F,EAAKF,IAAQ,IAAIkG,QAAQ,MAAO,iBAU3DlD,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,OACEC,UAAU,cACVM,MAAO,CACL2C,eAAgBzI,EAAY,WAAa,mBAGzCA,GACAsF,IAAAC,cAAA,UACGzF,EAAe,yDAAc,0DAGlCwF,IAAAC,cAAA,YACIvF,GACAsF,IAAAC,cAAA,UAAQM,QAASA,IAAM9F,GAAiBD,IACrCA,EAAe,qBAAQ,sBAG5BwF,IAAAC,cAAA,UAAQM,QAASA,IAAM5F,GAAcD,IAClCA,EAAY,SAAM,aAKvBA,GACAsF,IAAAC,cAAAD,IAAAoD,SAAA,KACEpD,IAAAC,cAAA,KAAGO,MAAO,CAAE6C,OAAQ,EAAGP,SAAU,QAC9BtI,EAAY,6CAAAuB,OACCe,OAAOwG,OAAOhJ,GAAUoF,OAChC,CAACC,EAAKE,IAAMF,EAAME,EAAEf,MACpB,GACD,uDAAA/C,OACSe,OAAOwG,OAAOlJ,GAAUsF,OAChC,CAACC,EAAKE,IAAMF,EAAME,EAAEf,MACpB,GACD,WAEPkB,IAAAC,cAAA,SAAG,iBACIR,EAAW,IAAEjF,GAAY,SAAAuB,OAAa+D,IAE7CE,IAAAC,cAAA,MAAIO,MAAO,CAAE+C,UAAW,OAAQC,YAAa,IAC1CjE,EAAY6C,IAAIqB,IAAA,IAAErC,EAAMC,GAAKoC,EAAA,OAC5BzD,IAAAC,cAAA,MACEjD,IAAKoE,EACLZ,MAAO,CACLkD,QAAS,OACTP,eAAgB,gBAChBQ,WAAY,WAGd3D,IAAAC,cAAA,YACGoB,EAAK3H,4CAA4B,WAAjB2H,EAAK3H,2CAClB,SACA,GACH0H,GAEHpB,IAAAC,cAAA,QACEO,MAAO,CACLC,WAAY,QACZiD,QAAS,OACTC,WAAY,WAGd3D,IAAAC,cAAA,UACEM,QAASA,IACPlC,EACE+C,GACC,EACDC,EAAK1H,+BACL0H,EAAK3H,4CAGT8G,MAAO,CAAEoD,YAAa,IACvB,UAGD5D,IAAAC,cAAA,YAAM,OAAEoB,EAAKvC,QACXpD,EAAW2F,EAAK1H,iCAChBqG,IAAAC,cAAA,UACEM,QAASA,IACPlC,EACE+C,EACA,EACAC,EAAK1H,+BACL0H,EAAK3H,4CAGTmK,SAAUxC,EAAKvC,OAAS,EACxB0B,MAAO,CACLC,WAAY,EACZqD,QAASzC,EAAKvC,OAAS,EAAI,GAAM,IAEpC,iBAYhBlE,GACCoF,IAAAC,cAAA,OACEO,MAAO,CACLuD,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,gBAAiB,kBACjBV,QAAS,OACTP,eAAgB,SAChBQ,WAAY,SACZU,OAAQ,MAGVrE,IAAAC,cAAA,OACEO,MAAO,CACL4D,gBAAiB,QACjBE,QAAS,OACTC,aAAc,MACdC,MAAO,MACPC,SAAU,QACVV,SAAU,aAGZ/D,IAAAC,cAAA,UACEM,QAASA,IAAM1F,GAAa,GAC5B2F,MAAO,CACLuD,SAAU,WACVC,IAAK,OACLE,MAAO,OACPQ,WAAY,OACZC,OAAQ,OACR7B,SAAU,QACVH,OAAQ,YAEX,QAGD3C,IAAAC,cAAA,UAAI,kCACJD,IAAAC,cAAA,YACExC,MAAO3C,EACP8J,UAAQ,EACRpE,MAAO,CACLgE,MAAO,OACPK,OAAQ,QACRC,WAAY,MACZC,WAAY,eAGhB/E,IAAAC,cAAA,UACEM,QArUOyE,KACjBC,UAAUC,UACPC,UAAUrK,GACVqB,KAAK,KACJ0E,MAAM,sDAEPuE,MAAM,KACLvE,MAAM,yEA+TAL,MAAO,CACL6E,UAAW,OACXf,QAAS,WACTxB,SAAU,MACVH,OAAQ,YAEX,wBAON3H,GACCgF,IAAAC,cAAA,OACEO,MAAO,CACLuD,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,gBAAiB,kBACjBV,QAAS,OACTP,eAAgB,SAChBQ,WAAY,SACZU,OAAQ,MAGVrE,IAAAC,cAAA,OACEO,MAAO,CACL4D,gBAAiB,QACjBE,QAAS,OACTC,aAAc,MACdC,MAAO,MACPC,SAAU,QACVV,SAAU,aAGZ/D,IAAAC,cAAA,UACEM,QAASA,IAAMtF,GAAmB,GAClCuF,MAAO,CACLuD,SAAU,WACVC,IAAK,OACLE,MAAO,OACPQ,WAAY,OACZC,OAAQ,OACR7B,SAAU,QACVH,OAAQ,YAEX,QAGD3C,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAAA,YACExC,MAAOvC,EACP0J,UAAQ,EACRpE,MAAO,CACLgE,MAAO,OACPK,OAAQ,QACRC,WAAY,MACZC,WAAY,iBAOrB3J,GACC4E,IAAAC,cAAA,OACEO,MAAO,CACLuD,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,gBAAiB,kBACjBV,QAAS,OACTP,eAAgB,SAChBQ,WAAY,SACZU,OAAQ,MAGVrE,IAAAC,cAAA,OACEO,MAAO,CACL4D,gBAAiB,QACjBE,QAAS,OACTC,aAAc,MACdC,MAAO,MACPC,SAAU,QACVV,SAAU,aAGZ/D,IAAAC,cAAA,UACEM,QAASA,IAAMlF,GAAmB,GAClCmF,MAAO,CACLuD,SAAU,WACVC,IAAK,OACLE,MAAO,OACPQ,WAAY,OACZC,OAAQ,OACR7B,SAAU,QACVH,OAAQ,YAEX,QAGD3C,IAAAC,cAAA,UAAI,oDACJD,IAAAC,cAAA,YACExC,MAAOnC,EACP8E,SAAWxC,GAAMrC,EAAcqC,EAAEyC,OAAO5C,OACxC0C,YAAY,gHACZK,MAAO,CACLgE,MAAO,OACPK,OAAQ,QACRC,WAAY,MACZC,WAAY,eAGhB/E,IAAAC,cAAA,UACEM,QAASA,KACP,MAAM8B,EAAQ/G,EACXoB,MAAM,SACN0F,IAAKkD,GAASA,EAAK7I,QACnBE,OAAOC,SAEJ2I,EAAU,GACVC,EAAU,GAEhB,IAAK,MAAMC,KAAcpD,EAAO,KAAAqD,EAC9B,MAAMxI,EAAOrE,EAAM+H,KAChB1C,GAAMA,EAAE,oCAAauH,GAExB,IAAKvI,EAAM,SAEX,MAAMkE,EAAOlE,EAAK,4BACZuB,EAAS/C,EAAWwB,EAAK,mCAEzBmD,EAAS5B,EAAS+G,EAAUD,EAC5BtG,EAAMR,EAAS,EAAI,EACnBI,GAAwB,QAAZ6G,EAAArF,EAAOe,UAAK,IAAAsE,OAAA,EAAZA,EAAc5G,QAAS,EACrCD,EAAYI,IACdoB,EAAOe,GAAQ,CACbtC,MAAOD,EAAY,EACnBnF,6CAASwD,EAAK,8CACdvD,iCAAOuD,EAAK,oCAKlB7C,EAAYkL,GACZhL,EAAYiL,GACZnK,GAAmB,IAErBmF,MAAO,CACL6E,UAAW,OACXf,QAAS,WACTxB,SAAU,MACVH,OAAQ,YAEX,gCC5oBEgD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAlI,EAAA,GAAAzB,KAAA2J,EAAAC,KAAA,UAAqB5J,KAAK+E,IAAiD,IAAhD8E,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASlF,EACpE8E,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzG,IAAAC,cAACD,IAAM0G,WAAU,KACf1G,IAAAC,cAACrH,EAAG,QAOR+M","file":"static/js/main.06ec2e98.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [useRegex, setUseRegex] = useState(false);\n  const [searchFields, setSearchFields] = useState({\n    カード名: true,\n    効果テキスト: true,\n    ライフバースト: false,\n    カード種類: false,\n    カードタイプ: false,\n  });\n  const [displayFields, setDisplayFields] = useState({\n    カード種類: true,\n    カードタイプ: false,\n    色: false,\n    レベル: false,\n    コスト: false,\n    パワー: false,\n    効果テキスト: true,\n    ライフバースト: false,\n    使用タイミング: false,\n  });\n  const [deckMain, setDeckMain] = useState({});\n  const [deckLrig, setDeckLrig] = useState({});\n  const [showMainDeck, setShowMainDeck] = useState(true);\n  const [minimized, setMinimized] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [outputText, setOutputText] = useState(\"\");\n  const [showSubmitModal, setShowSubmitModal] = useState(false);\n  const [submitText, setSubmitText] = useState(\"\");\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [importText, setImportText] = useState(\"\");\n\n  const displayOrder = [\n    \"カード種類\",\n    \"カードタイプ\",\n    \"色\",\n    \"レベル\",\n    \"コスト\",\n    \"パワー\",\n    \"効果テキスト\",\n    \"ライフバースト\",\n    \"使用タイミング\",\n  ];\n\n  const fieldLabels = {\n    カード名: \"カード名\",\n    効果テキスト: \"効果テキスト\",\n    ライフバースト: \"LB\",\n    カード種類: \"種類\",\n    カードタイプ: \"タイプ\",\n    色: \"色\",\n    レベル: \"Lv\",\n    コスト: \"コスト\",\n    パワー: \"パワー\",\n    使用タイミング: \"タイミング\",\n  };\n\n  const isLrigCard = (type) =>\n    [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(type);\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\n      .then((res) => res.json())\n      .then((data) => setCards(data));\n  }, []);\n\n  const handleSearch = () => {\n    const keywords = query.trim().split(/\\s+/).filter(Boolean);\n    const activeFields = Object.keys(searchFields).filter(\n      (key) => searchFields[key]\n    );\n\n    const result = cards.filter((card) =>\n      keywords.every((kw) => {\n        try {\n          const regex = useRegex ? new RegExp(kw, \"i\") : null;\n          return activeFields.some((field) => {\n            const value = card[field] || \"\";\n            return useRegex\n              ? regex.test(value)\n              : value.toLowerCase().includes(kw.toLowerCase());\n          });\n        } catch (e) {\n          console.error(\"Invalid regex:\", kw);\n          return false;\n        }\n      })\n    );\n\n    const seen = new Set();\n    const unique = result.filter((c) => {\n      if (seen.has(c[\"カード名\"])) return false;\n      seen.add(c[\"カード名\"]);\n      return true;\n    });\n\n    setFiltered(unique);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") handleSearch();\n  };\n\n  const toggleField = (field) => {\n    setSearchFields((prev) => ({ ...prev, [field]: !prev[field] }));\n  };\n\n  const handleOutputClick = () => {\n    const getCardNumbers = (deck) =>\n      Object.entries(deck).flatMap(([name, info]) =>\n        Array(info.count).fill(\n          cards.find((c) => c[\"カード名\"] === name)?.[\"カード番号\"] ||\n            \"UNKNOWN\"\n        )\n      );\n\n    const lrigList = getCardNumbers(deckLrig);\n\n    const mainList = Object.entries(deckMain);\n    const lbCards = mainList.filter(\n      ([, info]) => info.ライフバースト && info.ライフバースト !== \"―\"\n    );\n    const nonLbCards = mainList.filter(\n      ([, info]) => !info.ライフバースト || info.ライフバースト === \"―\"\n    );\n\n    const lbList = getCardNumbers(Object.fromEntries(lbCards));\n    const nonLbList = getCardNumbers(Object.fromEntries(nonLbCards));\n\n    const all = [...lrigList, ...lbList, ...nonLbList];\n    setOutputText(all.join(\"\\n\"));\n    setShowModal(true);\n  };\n\n  const handleTeishutsuClick = () => {\n    const getCardEntries = (deck) =>\n      Object.entries(deck).flatMap(([name, info]) =>\n        Array(info.count).map(() => {\n          const card = cards.find((c) => c[\"カード名\"] === name);\n          return [\n            card?.[\"カード番号\"] || \"UNKNOWN\",\n            card?.[\"カード名\"] || name,\n          ];\n        })\n      );\n\n    const lrigEntries = getCardEntries(deckLrig);\n    const mainEntries = getCardEntries(deckMain);\n    const allEntries = [...lrigEntries, ...mainEntries];\n\n    const lines = allEntries.map(\n      ([num, name]) => `${num}\\t${name}`\n    );\n    setSubmitText(lines.join(\"\\n\"));\n    setShowSubmitModal(true);\n  };\n\n  const handleAddSaba = () => {\n    const card = cards.find((c) => c[\"カード番号\"] === \"WXDi-D03-020\");\n    if (!card) {\n      alert(\"カード WXDi-D03-020 が見つかりませんでした。\");\n      return;\n    }\n\n    setDeckMain((prev) => ({\n      ...prev,\n      [card[\"カード名\"]]: {\n        count: 4,\n        ライフバースト: card[\"ライフバースト\"],\n        カード種類: card[\"カード種類\"],\n      },\n    }));\n  };\n\n  const handleCopy = () => {\n    navigator.clipboard\n      .writeText(outputText)\n      .then(() => {\n        alert(\"コピーしました！\");\n      })\n      .catch(() => {\n        alert(\"コピーに失敗しました。\");\n      });\n  };\n\n  const toggleDisplayField = (field) => {\n    setDisplayFields((prev) => ({ ...prev, [field]: !prev[field] }));\n  };\n\n  const adjustDeck = (cardName, delta, type, lb) => {\n    const isLrig = isLrigCard(type);\n    const setDeck = isLrig ? setDeckLrig : setDeckMain;\n    const deck = isLrig ? deckLrig : deckMain;\n    const maxCount = isLrig ? 1 : 4;\n\n    setDeck((prev) => {\n      const prevCount = prev[cardName]?.count || 0;\n      const newCount = Math.max(0, Math.min(maxCount, prevCount + delta));\n      if (newCount === 0) {\n        const copy = { ...prev };\n        delete copy[cardName];\n        return copy;\n      }\n      return {\n        ...prev,\n        [cardName]: { count: newCount, ライフバースト: lb, カード種類: type },\n      };\n    });\n  };\n\n  const currentDeck = showMainDeck ? deckMain : deckLrig;\n  const deckEntries = Object.entries(currentDeck);\n  const totalCount = deckEntries.reduce((acc, [, v]) => acc + v.count, 0);\n  const lbCount = deckEntries.reduce(\n    (acc, [, v]) =>\n      v.ライフバースト && v.ライフバースト !== \"―\"\n        ? acc + v.count\n        : acc,\n    0\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"header-fixed\">\n        <input\n          type=\"text\"\n          placeholder=\"検索...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyDown={handleKeyDown}\n        />\n        <button onClick={handleSearch}>検索</button>\n        <label style={{ marginLeft: \"10px\" }}>\n          <input\n            type=\"checkbox\"\n            checked={useRegex}\n            onChange={() => setUseRegex(!useRegex)}\n          />{\" \"}\n          正規表現\n        </label>\n        <button style={{ marginLeft: \"16px\" }} onClick={handleAddSaba}>\n          鯖＃\n        </button>\n        <button style={{ marginLeft: \"16px\" }} onClick={handleOutputClick}>\n          出力\n        </button>\n        <button\n          style={{ marginLeft: \"8px\" }}\n          onClick={handleTeishutsuClick}\n        >\n          提出用\n        </button>\n        <button\n          style={{ marginLeft: \"8px\" }}\n          onClick={() => setShowImportModal(true)}\n        >\n          インポート\n        </button>\n\n        <div className=\"field-controls\">\n          <strong>検索対象:</strong>\n          {Object.keys(searchFields).map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={searchFields[field]}\n                onChange={() => toggleField(field)}\n              />{\" \"}\n              {fieldLabels[field] || field}\n            </label>\n          ))}\n        </div>\n        <div className=\"field-controls\">\n          <strong>表示項目:</strong>\n          {displayOrder.map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={displayFields[field]}\n                onChange={() => toggleDisplayField(field)}\n              />{\" \"}\n              {fieldLabels[field] || field}\n            </label>\n          ))}\n        </div>\n        <table className=\"fixed-header-table\">\n          <thead>\n            <tr>\n              <th>カード名</th>\n              {displayOrder\n                .filter((key) => displayFields[key])\n                .map((key) => (\n                  <th key={key}>{fieldLabels[key]}</th>\n                ))}\n            </tr>\n          </thead>\n        </table>\n      </div>\n\n      <div className=\"table-container\">\n        <table className=\"fixed-header-table\">\n          <tbody>\n            {filtered.map((card, i) => (\n              <tr key={i}>\n                <td>\n                  <span\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() =>\n                      adjustDeck(\n                        card[\"カード名\"],\n                        1,\n                        card[\"カード種類\"],\n                        card[\"ライフバースト\"]\n                      )\n                    }\n                  >\n                    {card[\"カード名\"]}\n                  </span>\n                  <a\n                    href={`https://www.takaratomy.co.jp/products/wixoss/library/card/card_detail.php?card_no=${card[\"カード番号\"]}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ marginLeft: \"0.3em\", fontSize: \"0.8em\" }}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    ❔\n                  </a>\n                </td>\n                {displayOrder\n                  .filter((key) => displayFields[key])\n                  .map((key) => (\n                    <td\n                      key={key}\n                      dangerouslySetInnerHTML={{\n                        __html: (card[key] || \"\").replace(/\\n/g, \"<br>\"),\n                      }}\n                    />\n                  ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"deck-box\">\n        <div\n          className=\"deck-header\"\n          style={{\n            justifyContent: minimized ? \"flex-end\" : \"space-between\",\n          }}\n        >\n          {!minimized && (\n            <h3>\n              {showMainDeck ? \"現在のメインデッキ\" : \"現在のルリグデッキ\"}\n            </h3>\n          )}\n          <div>\n            {!minimized && (\n              <button onClick={() => setShowMainDeck(!showMainDeck)}>\n                {showMainDeck ? \"ルリグ\" : \"メイン\"}\n              </button>\n            )}\n            <button onClick={() => setMinimized(!minimized)}>\n              {minimized ? \"＋\" : \"－\"}\n            </button>\n          </div>\n        </div>\n\n        {!minimized && (\n          <>\n            <p style={{ margin: 0, fontSize: \"1em\" }}>\n              {showMainDeck\n                ? `ルリグデッキ：${Object.values(deckLrig).reduce(\n                    (acc, v) => acc + v.count,\n                    0\n                  )}枚`\n                : `メインデッキ：${Object.values(deckMain).reduce(\n                    (acc, v) => acc + v.count,\n                    0\n                  )}枚`}\n            </p>\n            <p>\n              枚数: {totalCount} {showMainDeck && `/ LB: ${lbCount}`}\n            </p>\n            <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\n              {deckEntries.map(([name, info]) => (\n                <li\n                  key={name}\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <span>\n                    {info.ライフバースト && info.ライフバースト !== \"―\"\n                      ? \"★\"\n                      : \"\"}\n                    {name}\n                  </span>\n                  <span\n                    style={{\n                      marginLeft: \"0.5em\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <button\n                      onClick={() =>\n                        adjustDeck(\n                          name,\n                          -1,\n                          info.カード種類,\n                          info.ライフバースト\n                        )\n                      }\n                      style={{ marginRight: 4 }}\n                    >\n                      －\n                    </button>\n                    <span>×{info.count}</span>\n                    {!isLrigCard(info.カード種類) && (\n                      <button\n                        onClick={() =>\n                          adjustDeck(\n                            name,\n                            1,\n                            info.カード種類,\n                            info.ライフバースト\n                          )\n                        }\n                        disabled={info.count >= 4}\n                        style={{\n                          marginLeft: 4,\n                          opacity: info.count >= 4 ? 0.5 : 1,\n                        }}\n                      >\n                        ＋\n                      </button>\n                    )}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n      </div>\n\n      {showModal && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: \"rgba(0,0,0,0.5)\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: 1000,\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"white\",\n              padding: \"20px\",\n              borderRadius: \"8px\",\n              width: \"80%\",\n              maxWidth: \"500px\",\n              position: \"relative\",\n            }}\n          >\n            <button\n              onClick={() => setShowModal(false)}\n              style={{\n                position: \"absolute\",\n                top: \"10px\",\n                right: \"10px\",\n                background: \"none\",\n                border: \"none\",\n                fontSize: \"1.2em\",\n                cursor: \"pointer\",\n              }}\n            >\n              ×\n            </button>\n            <h3>デッキ出力</h3>\n            <textarea\n              value={outputText}\n              readOnly\n              style={{\n                width: \"100%\",\n                height: \"300px\",\n                whiteSpace: \"pre\",\n                fontFamily: \"monospace\",\n              }}\n            />\n            <button\n              onClick={handleCopy}\n              style={{\n                marginTop: \"10px\",\n                padding: \"6px 12px\",\n                fontSize: \"1em\",\n                cursor: \"pointer\",\n              }}\n            >\n              コピー\n            </button>\n          </div>\n        </div>\n      )}\n\n      {showSubmitModal && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: \"rgba(0,0,0,0.5)\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: 1000,\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"white\",\n              padding: \"20px\",\n              borderRadius: \"8px\",\n              width: \"80%\",\n              maxWidth: \"500px\",\n              position: \"relative\",\n            }}\n          >\n            <button\n              onClick={() => setShowSubmitModal(false)}\n              style={{\n                position: \"absolute\",\n                top: \"10px\",\n                right: \"10px\",\n                background: \"none\",\n                border: \"none\",\n                fontSize: \"1.2em\",\n                cursor: \"pointer\",\n              }}\n            >\n              ×\n            </button>\n            <h3>提出用</h3>\n            <textarea\n              value={submitText}\n              readOnly\n              style={{\n                width: \"100%\",\n                height: \"300px\",\n                whiteSpace: \"pre\",\n                fontFamily: \"monospace\",\n              }}\n            />\n          </div>\n        </div>\n      )}\n\n      {showImportModal && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: \"rgba(0,0,0,0.5)\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: 1000,\n          }}\n        >\n          <div\n            style={{\n              backgroundColor: \"white\",\n              padding: \"20px\",\n              borderRadius: \"8px\",\n              width: \"80%\",\n              maxWidth: \"500px\",\n              position: \"relative\",\n            }}\n          >\n            <button\n              onClick={() => setShowImportModal(false)}\n              style={{\n                position: \"absolute\",\n                top: \"10px\",\n                right: \"10px\",\n                background: \"none\",\n                border: \"none\",\n                fontSize: \"1.2em\",\n                cursor: \"pointer\",\n              }}\n            >\n              ×\n            </button>\n            <h3>デッキインポート</h3>\n            <textarea\n              value={importText}\n              onChange={(e) => setImportText(e.target.value)}\n              placeholder=\"カード番号を1行ずつ貼り付けてください\"\n              style={{\n                width: \"100%\",\n                height: \"300px\",\n                whiteSpace: \"pre\",\n                fontFamily: \"monospace\",\n              }}\n            />\n            <button\n              onClick={() => {\n                const lines = importText\n                  .split(/\\r?\\n/)\n                  .map((line) => line.trim())\n                  .filter(Boolean);\n\n                const newMain = {};\n                const newLrig = {};\n\n                for (const cardNumber of lines) {\n                  const card = cards.find(\n                    (c) => c[\"カード番号\"] === cardNumber\n                  );\n                  if (!card) continue;\n\n                  const name = card[\"カード名\"];\n                  const isLrig = isLrigCard(card[\"カード種類\"]);\n\n                  const target = isLrig ? newLrig : newMain;\n                  const max = isLrig ? 1 : 4;\n                  const prevCount = target[name]?.count || 0;\n                  if (prevCount < max) {\n                    target[name] = {\n                      count: prevCount + 1,\n                      ライフバースト: card[\"ライフバースト\"],\n                      カード種類: card[\"カード種類\"],\n                    };\n                  }\n                }\n\n                setDeckMain(newMain);\n                setDeckLrig(newLrig);\n                setShowImportModal(false);\n              }}\n              style={{\n                marginTop: \"10px\",\n                padding: \"6px 12px\",\n                fontSize: \"1em\",\n                cursor: \"pointer\",\n              }}\n            >\n              読み込み\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}