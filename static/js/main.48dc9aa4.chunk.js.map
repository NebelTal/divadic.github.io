{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","deck","setDeck","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","displayOrder","displayFields","setDisplayFields","色","レベル","コスト","パワー","使用タイミング","fieldLabels","useEffect","fetch","concat","process","Date","now","then","res","json","data","handleSearch","keywords","split","filter","Boolean","activeFields","Object","entries","_ref","_","checked","map","_ref2","field","result","card","every","keyword","pattern","RegExp","some","text","test","toLowerCase","includes","e","console","error","uniqueByCardName","seen","Set","has","add","push","log","c","totalCards","values","reduce","sum","item","count","totalLB","sortedDeckEntries","sort","_ref3","_ref4","aName","aData","bName","bData","aHasLB","React","createElement","className","style","padding","fontFamily","position","marginBottom","width","type","placeholder","value","onChange","target","onKeyDown","key","marginLeft","keys","marginRight","_objectSpread","[object Object]","toggleField","toggleDisplayField","onClick","length","border","cellPadding","i","prev","_prev$name","name","addToDeck","cursor","href","rel","fontSize","stopPropagation","j","bottom","right","background","borderRadius","maxWidth","boxShadow","textAlign","listStyle","paddingLeft","_ref5","updated","removeFromDeck","display","justifyContent","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.48dc9aa4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [useRegex, setUseRegex] = useState(false);\n  const [deck, setDeck] = useState({});\n  const [searchFields, setSearchFields] = useState({\n    カード名: true,\n    効果テキスト: true,\n    ライフバースト: false,\n    カード種類: false,\n    カードタイプ: false,\n  });\n  const displayOrder = [\n    \"効果テキスト\",\n    \"ライフバースト\",\n    \"カード種類\",\n    \"カードタイプ\",\n    \"色\",\n    \"レベル\",\n    \"コスト\",\n    \"パワー\",\n    \"使用タイミング\"\n  ];\n  const [displayFields, setDisplayFields] = useState({\n    効果テキスト: true,\n    ライフバースト: true,\n    カード種類: true,\n    カードタイプ: true,\n    色: true,\n    レベル: true,\n    コスト: true,\n    パワー: true,\n    使用タイミング: true,\n  });\n\n  const fieldLabels = {\n    カード名: \"カード名\",\n    効果テキスト: \"効果テキスト\",\n    ライフバースト: \"LB\",\n    カード種類: \"種類\",\n    カードタイプ: \"タイプ\",\n    色: \"色\",\n    レベル: \"レベル\",\n    コスト: \"コスト\",\n    パワー: \"パワー\",\n    使用タイミング: \"使用タイミング\",\n  };\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\n      .then((res) => res.json())\n      .then((data) => setCards(data));\n  }, []);\n\n  const handleSearch = () => {\n    const keywords = query.split(/\\s+/).filter(Boolean);\n    const activeFields = Object.entries(searchFields)\n      .filter(([_, checked]) => checked)\n      .map(([field]) => field);\n\n    const result = cards.filter((card) =>\n      keywords.every((keyword) => {\n        try {\n          const pattern = useRegex ? new RegExp(keyword, \"i\") : null;\n          return activeFields.some((field) => {\n            const text = card[field] || \"\";\n            return useRegex ? pattern.test(text) : text.toLowerCase().includes(keyword.toLowerCase());\n          });\n        } catch (e) {\n          console.error(\"Invalid regex:\", keyword);\n          return false;\n        }\n      })\n    );\n\n    const uniqueByCardName = [];\n    const seen = new Set();\n    for (const card of result) {\n      if (!seen.has(card[\"カード名\"])) {\n        seen.add(card[\"カード名\"]);\n        uniqueByCardName.push(card);\n      }\n    }\n\n    console.log(\"検索結果のカード番号:\", uniqueByCardName.map(c => c[\"カード番号\"]));\n\n    setFiltered(uniqueByCardName);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  const toggleField = (field) => {\n    setSearchFields({ ...searchFields, [field]: !searchFields[field] });\n  };\n\n  const toggleDisplayField = (field) => {\n    setDisplayFields({ ...displayFields, [field]: !displayFields[field] });\n  };\n\n  const addToDeck = (card) => {\n    setDeck((prev) => {\n      const name = card[\"カード名\"];\n      const count = prev[name]?.count || 0;\n      if (count >= 4) return prev;\n      return {\n        ...prev,\n        [name]: {\n          count: count + 1,\n          ライフバースト: card[\"ライフバースト\"],\n          カード種類: card[\"カード種類\"]\n        },\n      };\n    });\n  };\n\n  const removeFromDeck = (name) => {\n    setDeck((prev) => {\n      const updated = { ...prev };\n      if (updated[name].count > 1) {\n        updated[name].count--;\n      } else {\n        delete updated[name];\n      }\n      return updated;\n    });\n  };\n\n  const totalCards = Object.values(deck).reduce((sum, item) => sum + item.count, 0);\n  const totalLB = Object.values(deck).reduce(\n    (sum, item) => sum + (item.ライフバースト && item.ライフバースト !== \"―\" ? item.count : 0),\n    0\n  );\n\n  const sortedDeckEntries = Object.entries(deck).sort(([aName, aData], [bName, bData]) => {\n    const aHasLB = aData.ライフバースト && aData.ライフバースト !== \"―\";\n    const bHasLB = bData.ライフバースト && bData.ライフバースト !== \"―\";\n    if (aHasLB === bHasLB) return 0;\n    return aHasLB ? -1 : 1;\n  });\n\n  return (\n    <div className=\"App\" style={{ padding: \"2rem\", fontFamily: \"sans-serif\", position: \"relative\" }}>\n      <h1>WIXOSS カード検索</h1>\n      <input\n        style={{ marginBottom: \"1rem\", padding: \"0.5em\", width: \"300px\" }}\n        type=\"text\"\n        placeholder=\"検索ワードを入力\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        onKeyDown={handleKeyDown}\n      />\n      <label style={{ marginLeft: \"1em\" }}>\n        <input\n          type=\"checkbox\"\n          checked={useRegex}\n          onChange={() => setUseRegex(!useRegex)}\n        /> 正規表現\n      </label>\n\n      <div style={{ marginBottom: \"1rem\" }}>\n        <strong>検索対象:</strong>\n        {Object.keys(searchFields).map((field) => (\n          <label key={field} style={{ marginRight: \"1em\" }}>\n            <input\n              type=\"checkbox\"\n              checked={searchFields[field]}\n              onChange={() => toggleField(field)}\n            />\n            {fieldLabels[field] || field}\n          </label>\n        ))}\n      </div>\n\n      <div style={{ marginBottom: \"1rem\" }}>\n        <strong>表示項目:</strong>\n        {displayOrder.map((field) => (\n          <label key={field} style={{ marginRight: \"1em\" }}>\n            <input\n              type=\"checkbox\"\n              checked={displayFields[field]}\n              onChange={() => toggleDisplayField(field)}\n            />\n            {fieldLabels[field] || field}\n          </label>\n        ))}\n      </div>\n\n      <button onClick={handleSearch}>検索</button>\n\n      {filtered.length > 0 && (\n        <table border=\"1\" cellPadding=\"4\">\n          <thead>\n            <tr>\n              <th>カード名</th>\n              {displayOrder.filter((key) => displayFields[key]).map((key, i) => (\n                <th key={i}>{fieldLabels[key] || key}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {filtered.map((card, i) => (\n              <tr key={i}>\n                <td onClick={() => addToDeck(card)} style={{ cursor: \"pointer\" }}>\n                  {card[\"カード名\"]} {\" \"}\n                  <a\n                    href={`https://www.takaratomy.co.jp/products/wixoss/library/card/card_detail.php?card_no=${card[\"カード番号\"]}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ marginLeft: \"0.3em\", fontSize: \"0.8em\" }}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    ❔\n                  </a>\n                </td>\n                {displayOrder.filter((key) => displayFields[key]).map((key, j) => (\n                  <td key={j}>{card[key]}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n\n      {/* Deck Modal - Always visible */}\n      <div style={{\n        position: \"fixed\",\n        bottom: \"20px\",\n        right: \"20px\",\n        background: \"#fff\",\n        border: \"1px solid #ccc\",\n        padding: \"1em\",\n        borderRadius: \"8px\",\n        maxWidth: \"300px\",\n        boxShadow: \"0 0 10px rgba(0,0,0,0.2)\",\n        textAlign: \"left\"\n      }}>\n        <h3>現在のデッキ</h3>\n        <p>枚数: {totalCards} / LB: {totalLB}</p>\n        {sortedDeckEntries.length > 0 ? (\n          <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\n            {sortedDeckEntries.map(([name, data]) => (\n              <li\n                key={name}\n                onClick={() => removeFromDeck(name)}\n                style={{ cursor: \"pointer\", display: \"flex\", justifyContent: \"space-between\" }}\n              >\n                <span>{data.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\n                <span style={{ marginLeft: \"0.5em\" }}>×{data.count}</span>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <p>カードが追加されていません。</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}