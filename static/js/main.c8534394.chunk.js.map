{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","displayFields","setDisplayFields","色","レベル","コスト","パワー","使用タイミング","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","showModal","setShowModal","outputText","setOutputText","displayOrder","fieldLabels","isLrigCard","type","includes","useEffect","fetch","concat","process","Date","now","then","res","json","data","handleSearch","keywords","trim","split","filter","Boolean","activeFields","Object","keys","key","result","card","every","kw","regex","RegExp","some","field","value","test","toLowerCase","e","console","error","seen","Set","unique","c","has","add","adjustDeck","cardName","delta","lb","isLrig","maxCount","prev","_prev$cardName","prevCount","count","newCount","Math","max","min","copy","_objectSpread","[object Object]","currentDeck","deckEntries","entries","totalCount","reduce","acc","_ref4","v","lbCount","_ref5","React","createElement","className","placeholder","onChange","target","onKeyDown","onClick","style","marginLeft","checked","handleOutputClick","getCardNumbers","deck","flatMap","_ref","_cards$find","name","info","Array","fill","find","lrigList","mainList","lbCards","_ref2","nonLbCards","_ref3","all","fromEntries","join","map","toggleField","toggleDisplayField","i","cursor","href","rel","fontSize","stopPropagation","margin","values","listStyle","paddingLeft","_ref6","display","justifyContent","alignItems","marginRight","disabled","opacity","position","top","left","right","bottom","backgroundColor","zIndex","padding","borderRadius","width","maxWidth","background","border","readOnly","height","whiteSpace","fontFamily","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c8534394.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [useRegex, setUseRegex] = useState(false);\n  const [searchFields, setSearchFields] = useState({\n    カード名: true,\n    効果テキスト: true,\n    ライフバースト: false,\n    カード種類: false,\n    カードタイプ: false,\n  });\n  const [displayFields, setDisplayFields] = useState({\n    カード種類: true,\n    カードタイプ: true,\n    色: true,\n    レベル: true,\n    コスト: true,\n    パワー: true,\n    効果テキスト: true,\n    ライフバースト: true,\n    使用タイミング: true,\n  });\n  const [deckMain, setDeckMain] = useState({});\n  const [deckLrig, setDeckLrig] = useState({});\n  const [showMainDeck, setShowMainDeck] = useState(true);\n  const [minimized, setMinimized] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [outputText, setOutputText] = useState(\"\");\n\n\n  const displayOrder = [\n    \"カード種類\",\n    \"カードタイプ\",\n    \"色\",\n    \"レベル\",\n    \"コスト\",\n    \"パワー\",\n    \"効果テキスト\",\n    \"ライフバースト\",\n    \"使用タイミング\",\n  ];\n\n  const fieldLabels = {\n    カード名: \"カード名\",\n    効果テキスト: \"効果テキスト\",\n    ライフバースト: \"LB\",\n    カード種類: \"種類\",\n    カードタイプ: \"タイプ\",\n    色: \"色\",\n    レベル: \"Lv\",\n    コスト: \"コスト\",\n    パワー: \"パワー\",\n    使用タイミング: \"タイミング\",\n  };\n\n  const isLrigCard = (type) =>\n    [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(type);\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\n      .then((res) => res.json())\n      .then((data) => setCards(data));\n  }, []);\n\n  const handleSearch = () => {\n    const keywords = query.trim().split(/\\s+/).filter(Boolean);\n    const activeFields = Object.keys(searchFields).filter((key) => searchFields[key]);\n\n    const result = cards.filter((card) =>\n      keywords.every((kw) => {\n        try {\n          const regex = useRegex ? new RegExp(kw, \"i\") : null;\n          return activeFields.some((field) => {\n            const value = card[field] || \"\";\n            return useRegex\n              ? regex.test(value)\n              : value.toLowerCase().includes(kw.toLowerCase());\n          });\n        } catch (e) {\n          console.error(\"Invalid regex:\", kw);\n          return false;\n        }\n      })\n    );\n\n    const seen = new Set();\n    const unique = result.filter((c) => {\n      if (seen.has(c[\"カード名\"])) return false;\n      seen.add(c[\"カード名\"]);\n      return true;\n    });\n\n    setFiltered(unique);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") handleSearch();\n  };\n\n  const toggleField = (field) => {\n    setSearchFields((prev) => ({ ...prev, [field]: !prev[field] }));\n  };\n\n  const handleOutputClick = () => {\n    const getCardNumbers = (deck) =>\n     Object.entries(deck).flatMap(([name, info]) =>\n        Array(info.count).fill(\n         cards.find((c) => c[\"カード名\"] === name)?.[\"カード番号\"] || \"UNKNOWN\"\n       )\n      );\n\n    const lrigList = getCardNumbers(deckLrig);\n\n    const mainList = Object.entries(deckMain);\n    const lbCards = mainList.filter(([, info]) => info.ライフバースト && info.ライフバースト !== \"―\");\n    const nonLbCards = mainList.filter(([, info]) => !info.ライフバースト || info.ライフバースト === \"―\");\n\n    const lbList = getCardNumbers(Object.fromEntries(lbCards));\n    const nonLbList = getCardNumbers(Object.fromEntries(nonLbCards));\n\n    const all = [...lrigList, ...lbList, ...nonLbList];\n    setOutputText(all.join(\"\\n\"));\n    setShowModal(true);\n  };\n\n\n  const toggleDisplayField = (field) => {\n    setDisplayFields((prev) => ({ ...prev, [field]: !prev[field] }));\n  };\n\n  const adjustDeck = (cardName, delta, type, lb) => {\n    const isLrig = isLrigCard(type);\n    const setDeck = isLrig ? setDeckLrig : setDeckMain;\n    const deck = isLrig ? deckLrig : deckMain;\n    const maxCount = isLrig ? 1 : 4;\n\n    setDeck((prev) => {\n      const prevCount = prev[cardName]?.count || 0;\n      const newCount = Math.max(0, Math.min(maxCount, prevCount + delta));\n      if (newCount === 0) {\n        const copy = { ...prev };\n        delete copy[cardName];\n        return copy;\n      }\n      return {\n        ...prev,\n        [cardName]: { count: newCount, ライフバースト: lb, カード種類: type },\n      };\n    });\n  };\n\n  const currentDeck = showMainDeck ? deckMain : deckLrig;\n  const deckEntries = Object.entries(currentDeck);\n  const totalCount = deckEntries.reduce((acc, [, v]) => acc + v.count, 0);\n  const lbCount = deckEntries.reduce(\n  (acc, [, v]) =>\n    (v.ライフバースト && v.ライフバースト !== \"―\") ? acc + v.count : acc,\n  0\n);\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"header-fixed\">\n        <input\n          type=\"text\"\n          placeholder=\"検索...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyDown={handleKeyDown}\n        />\n        <button onClick={handleSearch}>検索</button>\n        <label style={{ marginLeft: \"10px\" }}>\n          <input\n            type=\"checkbox\"\n            checked={useRegex}\n            onChange={() => setUseRegex(!useRegex)}\n          /> 正規表現\n        </label>\n        <button style={{ marginLeft: \"16px\" }} onClick={handleOutputClick}>\n        出力\n        </button>\n        <div className=\"field-controls\">\n          <strong>検索対象:</strong>\n          {Object.keys(searchFields).map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={searchFields[field]}\n                onChange={() => toggleField(field)}\n              /> {fieldLabels[field] || field}\n            </label>\n          ))}\n        </div>\n        <div className=\"field-controls\">\n          <strong>表示項目:</strong>\n          {displayOrder.map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={displayFields[field]}\n                onChange={() => toggleDisplayField(field)}\n              /> {fieldLabels[field] || field}\n            </label>\n          ))}\n        </div>\n        <table className=\"fixed-header-table\">\n          <thead>\n            <tr>\n              <th>カード名</th>\n              {displayOrder\n                .filter((key) => displayFields[key])\n                .map((key) => (\n                  <th key={key}>{fieldLabels[key]}</th>\n                ))}\n            </tr>\n          </thead>\n        </table>\n      </div>\n\n      <div className=\"table-container\">\n        <table className=\"fixed-header-table\">\n          <tbody>\n            {filtered.map((card, i) => (\n              <tr key={i}>\n                <td>\n                  <span\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() =>\n                      adjustDeck(\n                        card[\"カード名\"],\n                        1,\n                        card[\"カード種類\"],\n                        card[\"ライフバースト\"]\n                      )\n                    }\n                  >\n                    {card[\"カード名\"]}\n                  </span>\n                  <a\n                    href={`https://www.takaratomy.co.jp/products/wixoss/library/card/card_detail.php?card_no=${card[\"カード番号\"]}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ marginLeft: \"0.3em\", fontSize: \"0.8em\" }}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    ❔\n                  </a>\n                </td>\n                {displayOrder\n                  .filter((key) => displayFields[key])\n                  .map((key) => (\n                    <td key={key}>{card[key]}</td>\n                  ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"deck-box\">\n        <div className=\"deck-header\">\n          <h3>{showMainDeck ? \"現在のメインデッキ\" : \"現在のルリグデッキ\"}</h3>\n          <div>\n            <button onClick={() => setShowMainDeck(!showMainDeck)}>\n              {showMainDeck ? \"ルリグ\" : \"メイン\"}\n            </button>\n            <button onClick={() => setMinimized(!minimized)}>\n              {minimized ? \"＋\" : \"－\"}\n            </button>\n          </div>\n        </div>\n        <p style={{ margin: 0, fontSize: \"1em\" }}>\n        {showMainDeck\n          ? `ルリグデッキ：${Object.values(deckLrig).reduce((acc, v) => acc + v.count, 0)}枚`\n          : `メインデッキ：${Object.values(deckMain).reduce((acc, v) => acc + v.count, 0)}枚`}\n        </p>\n        <p>\n          枚数: {totalCount} {showMainDeck && `/ LB: ${lbCount}`}\n        </p>\n        {!minimized && (\n          <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\n            {deckEntries.map(([name, info]) => (\n              <li\n                key={name}\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                }}\n              >\n                <span>{info.ライフバースト && info.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\n                <span\n                  style={{\n                    marginLeft: \"0.5em\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <button\n                    onClick={() =>\n                      adjustDeck(name, -1, info.カード種類, info.ライフバースト)\n                    }\n                    style={{ marginRight: 4 }}\n                  >\n                    －\n                  </button>\n                  <span>×{info.count}</span>\n                  {!isLrigCard(info.カード種類) && (\n  <button\n    onClick={() =>\n      adjustDeck(name, 1, info.カード種類, info.ライフバースト)\n    }\n    disabled={info.count >= 4}\n    style={{ marginLeft: 4, opacity: info.count >= 4 ? 0.5 : 1 }}\n  >\n    ＋\n  </button>\n)}\n                </span>\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n\n{showModal && (\n  <div style={{\n    position: \"fixed\",\n    top: 0, left: 0, right: 0, bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.5)\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    zIndex: 1000\n  }}>\n    <div style={{\n      backgroundColor: \"white\",\n      padding: \"20px\",\n      borderRadius: \"8px\",\n      width: \"80%\",\n      maxWidth: \"500px\",\n      position: \"relative\"\n    }}>\n      <button onClick={() => setShowModal(false)} style={{\n        position: \"absolute\",\n        top: \"10px\",\n        right: \"10px\",\n        background: \"none\",\n        border: \"none\",\n        fontSize: \"1.2em\",\n        cursor: \"pointer\"\n      }}>×</button>\n      <h3>デッキ出力</h3>\n      <textarea\n        value={outputText}\n        readOnly\n        style={{ width: \"100%\", height: \"300px\", whiteSpace: \"pre\", fontFamily: \"monospace\" }}\n      />\n    </div>\n  </div>\n)}\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}