{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useEffect","fetch","process","then","res","json","data","handleSearch","q","toLowerCase","result","filter","card","Object","values","some","val","includes","React","createElement","className","style","padding","fontFamily","marginBottom","width","type","placeholder","value","onChange","e","target","onKeyDown","key","onClick","length","border","cellPadding","keys","map","i","j","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0LAoEeA,MAjEf,WACE,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAUC,GAAeF,mBAAS,KAClCG,EAAOC,GAAYJ,mBAAS,IAGnCK,oBAAU,KACRC,MAAMC,iCACHC,KAAMC,GAAQA,EAAIC,QAClBF,KAAMG,GAASZ,EAASY,KAC1B,IAEH,MAAMC,EAAeA,KACnB,MAAMC,EAAIV,EAAMW,cACVC,EAASjB,EAAMkB,OAAQC,GAC3BC,OAAOC,OAAOF,GAAMG,KAAMC,IACvBA,GAAO,IAAIP,cAAcQ,SAAST,KAGvCX,EAAYa,IASd,OACEQ,IAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAAEC,QAAS,OAAQC,WAAY,eACzDL,IAAAC,cAAA,UAAI,yCACJD,IAAAC,cAAA,SACEE,MAAO,CAAEG,aAAc,OAAQF,QAAS,QAASG,MAAO,SACxDC,KAAK,OACLC,YAAY,mDACZC,MAAO9B,EACP+B,SAAWC,GAAM/B,EAAS+B,EAAEC,OAAOH,OACnCI,UAfiBF,IACP,UAAVA,EAAEG,KACJ1B,OAeAW,IAAAC,cAAA,UAAQe,QAAS3B,GAAc,gBAE9BX,EAASuC,OAAS,GACjBjB,IAAAC,cAAA,SAAOiB,OAAO,IAAIC,YAAY,KAC5BnB,IAAAC,cAAA,aACED,IAAAC,cAAA,UACGN,OAAOyB,KAAK1C,EAAS,IAAI2C,IAAI,CAACN,EAAKO,IAClCtB,IAAAC,cAAA,MAAIc,IAAKO,GAAIP,MAInBf,IAAAC,cAAA,aACGvB,EAAS2C,IAAI,CAAC3B,EAAM4B,IACnBtB,IAAAC,cAAA,MAAIc,IAAKO,GACN3B,OAAOC,OAAOF,GAAM2B,IAAI,CAACvB,EAAKyB,IAC7BvB,IAAAC,cAAA,MAAIc,IAAKQ,GAAIzB,UC7ChB0B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAf,EAAA,GAAA3B,KAAA0C,EAAAC,KAAA,UAAqB3C,KAAK4C,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvC,IAAAC,cAACD,IAAMwC,WAAU,KACfxC,IAAAC,cAAC3B,EAAG,QAORkD","file":"static/js/main.3bedff47.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n\n  // 初回だけデータ読み込み（検索時にフィルタ）\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + \"/cards.json\")\n      .then((res) => res.json())\n      .then((data) => setCards(data));\n  }, []);\n\n  const handleSearch = () => {\n    const q = query.toLowerCase();\n    const result = cards.filter((card) =>\n      Object.values(card).some((val) =>\n        (val || \"\").toLowerCase().includes(q)\n      )\n    );\n    setFiltered(result);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  return (\n    <div className=\"App\" style={{ padding: \"2rem\", fontFamily: \"sans-serif\" }}>\n      <h1>WIXOSS カード検索</h1>\n      <input\n        style={{ marginBottom: \"1rem\", padding: \"0.5em\", width: \"300px\" }}\n        type=\"text\"\n        placeholder=\"検索ワードを入力\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        onKeyDown={handleKeyDown}\n      />\n      <button onClick={handleSearch}>検索</button>\n\n      {filtered.length > 0 && (\n        <table border=\"1\" cellPadding=\"4\">\n          <thead>\n            <tr>\n              {Object.keys(filtered[0]).map((key, i) => (\n                <th key={i}>{key}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {filtered.map((card, i) => (\n              <tr key={i}>\n                {Object.values(card).map((val, j) => (\n                  <td key={j}>{val}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}