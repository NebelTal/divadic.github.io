{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","fieldList","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","displayOrder","displayFields","setDisplayFields","色","レベル","コスト","パワー","使用タイミング","useEffect","fetch","concat","process","Date","now","then","res","json","data","adjustMainDeck","name","delta","prev","_updated$name","updated","_objectSpread","newCount","count","deck","totalCards","Object","values","reduce","sum","item","totalLB","sortedDeckEntries","entries","sort","_ref","_ref2","aName","aData","bName","bData","aHasLB","React","createElement","style","maxHeight","overflowY","padding","type","placeholder","value","onChange","e","target","margin","width","onClick","handleSearch","keywords","trim","split","filter","Boolean","activeFields","field","result","card","every","kw","regex","RegExp","some","test","toLowerCase","includes","console","error","seen","Set","unique","c","has","add","log","map","marginBottom","marginLeft","checked","key","[object Object]","toggleDisplayField","borderCollapse","border","f","i","index","_deck$name","isLrigDeckCard","setDeck","addToDeck","cursor","j","position","bottom","right","background","borderRadius","height","boxShadow","textAlign","display","justifyContent","alignItems","length","listStyle","paddingLeft","_ref3","Fragment","marginRight","removeFromLrigDeck","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5fafad8e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [useRegex, setUseRegex] = useState(false);\n  const [deckMain, setDeckMain] = useState({});\n  const [deckLrig, setDeckLrig] = useState({});\n  const [showMainDeck, setShowMainDeck] = useState(true);\n  const [minimized, setMinimized] = useState(false);\n\n  const fieldList = [\"カード名\", \"効果テキスト\", \"ライフバースト\", \"カード種類\", \"カードタイプ\"];\n  const [searchFields, setSearchFields] = useState({\n    カード名: true,\n    効果テキスト: true,\n    ライフバースト: false,\n    カード種類: false,\n    カードタイプ: false,\n  });\n\n  const displayOrder = [\n    \"カード種類\",\n    \"カードタイプ\",\n    \"色\",\n    \"レベル\",\n    \"コスト\",\n    \"パワー\",\n    \"効果テキスト\",\n    \"ライフバースト\",\n    \"使用タイミング\"\n  ];\n  const [displayFields, setDisplayFields] = useState({\n    カード種類: true,\n    カードタイプ: true,\n    色: true,\n    レベル: true,\n    コスト: true,\n    パワー: true,\n    効果テキスト: true,\n    ライフバースト: true,\n    使用タイミング: true,\n  });\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\n      .then((res) => res.json())\n      .then((data) => setCards(data));\n  }, []);\n\n  const handleSearch = () => {\n    const keywords = query.trim().split(/\\s+/).filter(Boolean);\n    const activeFields = fieldList.filter((field) => searchFields[field]);\n\n    const result = cards.filter((card) =>\n      keywords.every((kw) => {\n        try {\n          const regex = useRegex ? new RegExp(kw, \"i\") : null;\n          return activeFields.some((field) => {\n            const value = card[field] || \"\";\n            return useRegex\n              ? regex.test(value)\n              : value.toLowerCase().includes(kw.toLowerCase());\n          });\n        } catch (e) {\n          console.error(\"Invalid regex:\", kw);\n          return false;\n        }\n      })\n    );\n\n    const seen = new Set();\n    const unique = result.filter((c) => {\n      if (seen.has(c[\"カード名\"])) return false;\n      seen.add(c[\"カード名\"]);\n      return true;\n    });\n\n    console.log(\"検索結果のカード番号:\", unique.map(c => c[\"カード番号\"]));\n    setFiltered(unique);\n  };\n\n  const toggleDisplayField = (field) => {\n    setDisplayFields({ ...displayFields, [field]: !displayFields[field] });\n  };\n\n  const addToDeck = (card) => {\n    const isLrigDeckCard = [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(card[\"カード種類\"]);\n    const setDeck = isLrigDeckCard ? setDeckLrig : setDeckMain;\n    const deck = isLrigDeckCard ? deckLrig : deckMain;\n    const name = card[\"カード名\"];\n    const count = deck[name]?.count || 0;\n    if (isLrigDeckCard && count >= 1) return;\n    if (!isLrigDeckCard && count >= 4) return;\n    setDeck({\n      ...deck,\n      [name]: {\n        count: count + 1,\n        ライフバースト: card[\"ライフバースト\"],\n        カード種類: card[\"カード種類\"]\n      },\n    });\n  };\n\n  const adjustMainDeck = (name, delta) => {\n    setDeckMain((prev) => {\n      const updated = { ...prev };\n      const count = updated[name]?.count || 0;\n      const newCount = count + delta;\n      if (newCount > 0 && newCount <= 4) {\n        updated[name].count = newCount;\n      } else if (newCount <= 0) {\n        delete updated[name];\n      }\n      return updated;\n    });\n  };\n\n  const removeFromLrigDeck = (name) => {\n    setDeckLrig((prev) => {\n      const updated = { ...prev };\n      delete updated[name];\n      return updated;\n    });\n  };\n\n  const deck = showMainDeck ? deckMain : deckLrig;\n  const totalCards = Object.values(deck).reduce((sum, item) => sum + item.count, 0);\n  const totalLB = Object.values(deck).reduce(\n    (sum, item) => sum + (item.ライフバースト && item.ライフバースト !== \"―\" ? item.count : 0),\n    0\n  );\n\n  const sortedDeckEntries = Object.entries(deck).sort(([aName, aData], [bName, bData]) => {\n    const aHasLB = aData.ライフバースト && aData.ライフバースト !== \"―\";\n    const bHasLB = bData.ライフバースト && bData.ライフバースト !== \"―\";\n    if (aHasLB === bHasLB) return 0;\n    return aHasLB ? -1 : 1;\n  });\n\n  return (\n    <div>\n      <div style={{ maxHeight: \"90vh\", overflowY: \"auto\", padding: \"1em\" }}>\n        <input\n          type=\"text\"\n          placeholder=\"検索...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ margin: \"10px\", padding: \"5px\", width: \"80%\" }}\n        />\n        <button onClick={handleSearch} style={{ padding: \"6px 12px\", marginBottom: \"10px\" }}>\n          検索\n        </button>\n        <label style={{ marginLeft: \"10px\" }}>\n          <input\n            type=\"checkbox\"\n            checked={useRegex}\n            onChange={() => setUseRegex(!useRegex)}\n          /> 正規表現\n        </label>\n        <div style={{ margin: \"10px 0\" }}>\n          <strong>検索対象:</strong>\n          {fieldList.map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={searchFields[field]}\n                onChange={() => setSearchFields({ ...searchFields, [field]: !searchFields[field] })}\n              /> {field}\n            </label>\n          ))}\n        </div>\n        <div style={{ margin: \"10px 0\" }}>\n          <strong>表示項目:</strong>\n          {displayOrder.map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={displayFields[field]}\n                onChange={() => toggleDisplayField(field)}\n              /> {field}\n            </label>\n          ))}\n        </div>\n        <table style={{ width: \"100%\", borderCollapse: \"collapse\", border: \"1px solid #ccc\" }}>\n          <thead>\n            <tr>\n              <th style={{ border: \"1px solid #ccc\" }}>カード名</th>\n              {displayOrder.filter(f => displayFields[f]).map((f, i) => (\n                <th key={i} style={{ border: \"1px solid #ccc\" }}>{f}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {filtered.map((card, index) => (\n              <tr key={index} onClick={() => addToDeck(card)} style={{ cursor: \"pointer\" }}>\n                <td style={{ border: \"1px solid #ccc\" }}>{card[\"カード名\"]}</td>\n                {displayOrder.filter(f => displayFields[f]).map((f, j) => (\n                  <td key={j} style={{ border: \"1px solid #ccc\" }}>{card[f]}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div style={{\n        position: \"fixed\",\n        bottom: \"20px\",\n        right: \"20px\",\n        background: \"#fff\",\n        border: \"1px solid #ccc\",\n        padding: \"1em\",\n        borderRadius: \"8px\",\n        width: \"300px\",\n        height: minimized ? \"auto\" : \"400px\",\n        overflowY: \"auto\",\n        boxShadow: \"0 0 10px rgba(0,0,0,0.2)\",\n        textAlign: \"left\"\n      }}>\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n          <h3 style={{ margin: 0 }}>\n            現在の{showMainDeck ? \"メインデッキ\" : \"ルリグデッキ\"}\n          </h3>\n          <div>\n            <button onClick={() => setShowMainDeck(!showMainDeck)} style={{ marginLeft: \"0.5em\" }}>\n              {showMainDeck ? \"ルリグ\" : \"メイン\"}\n            </button>\n            <button onClick={() => setMinimized(!minimized)} style={{ marginLeft: \"0.5em\" }}>\n              {minimized ? \"＋\" : \"－\"}\n            </button>\n          </div>\n        </div>\n        <p>枚数: {totalCards} {showMainDeck && !minimized && `/ LB: ${totalLB}`}</p>\n        {!minimized && (\n          sortedDeckEntries.length > 0 ? (\n            <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\n              {sortedDeckEntries.map(([name, data]) => (\n                <li\n                  key={name}\n                  style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\n                >\n                  <span>{data.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\n                  <span style={{ marginLeft: \"0.5em\", display: \"flex\", alignItems: \"center\" }}>\n                    {showMainDeck ? (\n                      <>\n                        <button onClick={() => adjustMainDeck(name, -1)} style={{ marginRight: \"4px\" }}>－</button>\n                        <span>×{data.count}</span>\n                        <button onClick={() => adjustMainDeck(name, 1)} style={{ marginLeft: \"4px\" }}>＋</button>\n                      </>\n                    ) : (\n                      <>\n                        <button onClick={() => removeFromLrigDeck(name)} style={{ marginRight: \"4px\" }}>－</button>\n                        <span>×{data.count}</span>\n                      </>\n                    )}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>カードが追加されていません。</p>\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}