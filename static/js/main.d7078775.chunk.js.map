{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","adjustMainDeck","name","delta","prev","_updated$name","updated","_objectSpread","newCount","count","deck","totalCards","Object","values","reduce","sum","item","totalLB","ライフバースト","sortedDeckEntries","entries","sort","_ref","_ref2","aName","aData","bName","bData","aHasLB","React","createElement","style","maxHeight","overflowY","type","placeholder","value","onChange","e","target","margin","padding","width","onClick","terms","trim","split","filteredCards","filter","card","every","term","regex","RegExp","replace","test","console","error","marginBottom","marginLeft","checked","borderCollapse","map","index","key","_deck$name","isLrigDeckCard","includes","setDeck","[object Object]","カード種類","addToDeck","cursor","position","bottom","right","background","border","borderRadius","height","boxShadow","textAlign","display","justifyContent","alignItems","Fragment","length","listStyle","paddingLeft","_ref3","data","marginRight","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d7078775.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [useRegex, setUseRegex] = useState(false);\n  const [deckMain, setDeckMain] = useState({});\n  const [deckLrig, setDeckLrig] = useState({});\n  const [showMainDeck, setShowMainDeck] = useState(true);\n  const [minimized, setMinimized] = useState(false);\n\n  const addToDeck = (card) => {\n    const isLrigDeckCard = [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(card[\"カード種類\"]);\n    const setDeck = isLrigDeckCard ? setDeckLrig : setDeckMain;\n    const deck = isLrigDeckCard ? deckLrig : deckMain;\n    const name = card[\"カード名\"];\n    const count = deck[name]?.count || 0;\n\n    if (isLrigDeckCard && count >= 1) return;\n    if (!isLrigDeckCard && count >= 4) return;\n\n    setDeck({\n      ...deck,\n      [name]: {\n        count: count + 1,\n        ライフバースト: card[\"ライフバースト\"],\n        カード種類: card[\"カード種類\"]\n      },\n    });\n  };\n\n  const adjustMainDeck = (name, delta) => {\n    setDeckMain((prev) => {\n      const updated = { ...prev };\n      const count = updated[name]?.count || 0;\n      const newCount = count + delta;\n      if (newCount > 0 && newCount <= 4) {\n        updated[name].count = newCount;\n      } else if (newCount <= 0) {\n        delete updated[name];\n      }\n      return updated;\n    });\n  };\n\n  const deck = showMainDeck ? deckMain : deckLrig;\n  const totalCards = Object.values(deck).reduce((sum, item) => sum + item.count, 0);\n  const totalLB = Object.values(deck).reduce(\n    (sum, item) => sum + (item.ライフバースト && item.ライフバースト !== \"―\" ? item.count : 0),\n    0\n  );\n\n  const sortedDeckEntries = Object.entries(deck).sort(([aName, aData], [bName, bData]) => {\n    const aHasLB = aData.ライフバースト && aData.ライフバースト !== \"―\";\n    const bHasLB = bData.ライフバースト && bData.ライフバースト !== \"―\";\n    if (aHasLB === bHasLB) return 0;\n    return aHasLB ? -1 : 1;\n  });\n\n  return (\n    <div>\n      <div style={{ maxHeight: \"70vh\", overflowY: \"auto\" }}>\n        <input\n          type=\"text\"\n          placeholder=\"検索...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          style={{ margin: \"10px\", padding: \"5px\", width: \"80%\" }}\n        />\n        <button\n          onClick={() => {\n            try {\n              const terms = query.trim().split(/\\s+/);\n              const filteredCards = cards.filter((card) => {\n                return terms.every(term => {\n                  const regex = useRegex\n                    ? new RegExp(term)\n                    : new RegExp(term.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"), \"i\");\n                  return (\n                    regex.test(card[\"カード名\"]) ||\n                    regex.test(card[\"効果テキスト\"]) ||\n                    regex.test(card[\"ライフバースト\"]) ||\n                    regex.test(card[\"カード種類\"]) ||\n                    regex.test(card[\"カードタイプ\"])\n                  );\n                });\n              });\n              setFiltered(filteredCards);\n            } catch (e) {\n              console.error(\"正規表現エラー:\", e);\n              setFiltered([]);\n            }\n          }}\n          style={{ padding: \"6px 12px\", marginBottom: \"10px\" }}\n        >\n          検索\n        </button>\n        <label style={{ marginLeft: \"10px\" }}>\n          <input\n            type=\"checkbox\"\n            checked={useRegex}\n            onChange={() => setUseRegex(!useRegex)}\n          /> 正規表現\n        </label>\n        <table style={{ width: \"100%\", borderCollapse: \"collapse\" }}>\n          <thead>\n            <tr>\n              <th>カード名</th>\n              <th>種類</th>\n              <th>タイプ</th>\n              <th>色</th>\n              <th>Lv</th>\n              <th>コスト</th>\n              <th>パワー</th>\n              <th>効果テキスト</th>\n              <th>LB</th>\n              <th>タイミング</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filtered.map((card, index) => (\n              <tr key={index} onClick={() => addToDeck(card)} style={{ cursor: \"pointer\" }}>\n                <td>{card[\"カード名\"]}</td>\n                <td>{card[\"カード種類\"]}</td>\n                <td>{card[\"カードタイプ\"]}</td>\n                <td>{card[\"色\"]}</td>\n                <td>{card[\"レベル\"]}</td>\n                <td>{card[\"コスト\"]}</td>\n                <td>{card[\"パワー\"]}</td>\n                <td>{card[\"効果テキスト\"]}</td>\n                <td>{card[\"ライフバースト\"]}</td>\n                <td>{card[\"使用タイミング\"]}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div style={{\n        position: \"fixed\",\n        bottom: \"20px\",\n        right: \"20px\",\n        background: \"#fff\",\n        border: \"1px solid #ccc\",\n        padding: \"1em\",\n        borderRadius: \"8px\",\n        width: \"300px\",\n        height: minimized ? \"auto\" : \"400px\",\n        overflowY: \"auto\",\n        boxShadow: \"0 0 10px rgba(0,0,0,0.2)\",\n        textAlign: \"left\"\n      }}>\n        <h3 style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n          <span>\n            現在の{showMainDeck ? \"メインデッキ\" : \"ルリグデッキ\"}\n            <button onClick={() => setShowMainDeck(!showMainDeck)} style={{ marginLeft: \"0.5em\" }}>\n              {showMainDeck ? \"ルリグ\" : \"メイン\"}\n            </button>\n          </span>\n          <button onClick={() => setMinimized(!minimized)}>\n            {minimized ? \"＋\" : \"－\"}\n          </button>\n        </h3>\n        {!minimized && (\n          <>\n            {showMainDeck ? (\n              <p>枚数: {totalCards} / LB: {totalLB}</p>\n            ) : (\n              <p>枚数: {totalCards}</p>\n            )}\n            {sortedDeckEntries.length > 0 ? (\n              <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\n                {sortedDeckEntries.map(([name, data]) => (\n                  <li\n                    key={name}\n                    style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\n                  >\n                    <span>{data.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\n                    <span style={{ marginLeft: \"0.5em\", display: \"flex\", alignItems: \"center\" }}>\n                      {showMainDeck && (\n                        <>\n                          <button onClick={() => adjustMainDeck(name, -1)} style={{ marginRight: \"4px\" }}>－</button>\n                          <span>×{data.count}</span>\n                          <button onClick={() => adjustMainDeck(name, 1)} style={{ marginLeft: \"4px\" }}>＋</button>\n                        </>\n                      )}\n                      {!showMainDeck && <span>×{data.count}</span>}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p>カードが追加されていません。</p>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}