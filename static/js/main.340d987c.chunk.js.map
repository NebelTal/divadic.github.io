{"version":3,"sources":["App.js","utils/search.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","fieldList","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","displayOrder","displayFields","setDisplayFields","色","レベル","コスト","パワー","使用タイミング","fieldLabels","useEffect","fetch","concat","process","Date","now","then","res","json","data","handleSearch","keywords","trim","split","filter","Boolean","activeFields","field","result","fields","card","every","kw","regex","RegExp","some","value","test","toLowerCase","includes","e","console","error","seen","Set","has","add","filterCards","log","map","c","adjustMainDeck","name","delta","prev","_updated$name","updated","_objectSpread","newCount","count","deck","totalCards","Object","values","reduce","sum","item","totalLB","sortedDeckEntries","entries","sort","_ref","_ref2","aName","aData","bName","bData","aHasLB","React","createElement","style","maxHeight","overflowY","padding","type","placeholder","onChange","target","onKeyDown","key","margin","width","onClick","marginBottom","marginLeft","checked","[object Object]","toggleDisplayField","borderCollapse","border","f","i","index","cursor","_deck$name","isLrigDeckCard","setDeck","addToDeck","href","rel","fontSize","stopPropagation","j","position","bottom","right","background","borderRadius","boxShadow","textAlign","display","justifyContent","alignItems","length","listStyle","paddingLeft","_ref3","Fragment","marginRight","removeFromLrigDeck","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.340d987c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { filterCards } from \"./utils/search\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [useRegex, setUseRegex] = useState(false);\n  const [deckMain, setDeckMain] = useState({});\n  const [deckLrig, setDeckLrig] = useState({});\n  const [showMainDeck, setShowMainDeck] = useState(true);\n  const [minimized, setMinimized] = useState(false);\n\n  const fieldList = [\"カード名\", \"効果テキスト\", \"ライフバースト\", \"カード種類\", \"カードタイプ\"];\n  const [searchFields, setSearchFields] = useState({\n    カード名: true,\n    効果テキスト: true,\n    ライフバースト: false,\n    カード種類: false,\n    カードタイプ: false,\n  });\n\n  const displayOrder = [\n    \"カード種類\",\n    \"カードタイプ\",\n    \"色\",\n    \"レベル\",\n    \"コスト\",\n    \"パワー\",\n    \"効果テキスト\",\n    \"ライフバースト\",\n    \"使用タイミング\"\n  ];\n  const [displayFields, setDisplayFields] = useState({\n    カード種類: true,\n    カードタイプ: true,\n    色: true,\n    レベル: true,\n    コスト: true,\n    パワー: true,\n    効果テキスト: true,\n    ライフバースト: true,\n    使用タイミング: true,\n  });\n\n  const fieldLabels = {\n    カード名: \"カード名\",\n    効果テキスト: \"効果テキスト\",\n    ライフバースト: \"LB\",\n    カード種類: \"種類\",\n    カードタイプ: \"タイプ\",\n    色: \"色\",\n    レベル: \"Lv\",\n    コスト: \"コスト\",\n    パワー: \"パワー\",\n    使用タイミング: \"タイミング\"\n  };\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\n      .then((res) => res.json())\n      .then((data) => setCards(data));\n  }, []);\n\n  const handleSearch = () => {\n    const keywords = query.trim().split(/\\s+/).filter(Boolean);\n    const activeFields = fieldList.filter((field) => searchFields[field]);\n    const result = filterCards(cards, keywords, activeFields, useRegex);\n    console.log(\"検索結果のカード番号:\", result.map(c => c[\"カード番号\"]));\n    setFiltered(result);\n  };\n\n  const toggleDisplayField = (field) => {\n    setDisplayFields({ ...displayFields, [field]: !displayFields[field] });\n  };\n\n  const addToDeck = (card) => {\n    const isLrigDeckCard = [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(card[\"カード種類\"]);\n    const setDeck = isLrigDeckCard ? setDeckLrig : setDeckMain;\n    const deck = isLrigDeckCard ? deckLrig : deckMain;\n    const name = card[\"カード名\"];\n    const count = deck[name]?.count || 0;\n    if (isLrigDeckCard && count >= 1) return;\n    if (!isLrigDeckCard && count >= 4) return;\n    setDeck({\n      ...deck,\n      [name]: {\n        count: count + 1,\n        ライフバースト: card[\"ライフバースト\"],\n        カード種類: card[\"カード種類\"]\n      },\n    });\n  };\n\n  const adjustMainDeck = (name, delta) => {\n    setDeckMain((prev) => {\n      const updated = { ...prev };\n      const count = updated[name]?.count || 0;\n      const newCount = count + delta;\n      if (newCount > 0 && newCount <= 4) {\n        updated[name].count = newCount;\n      } else if (newCount <= 0) {\n        delete updated[name];\n      }\n      return updated;\n    });\n  };\n\n  const removeFromLrigDeck = (name) => {\n    setDeckLrig((prev) => {\n      const updated = { ...prev };\n      delete updated[name];\n      return updated;\n    });\n  };\n\n  const deck = showMainDeck ? deckMain : deckLrig;\n  const totalCards = Object.values(deck).reduce((sum, item) => sum + item.count, 0);\n  const totalLB = Object.values(deck).reduce(\n    (sum, item) => sum + (item.ライフバースト && item.ライフバースト !== \"―\" ? item.count : 0),\n    0\n  );\n\n  const sortedDeckEntries = Object.entries(deck).sort(([aName, aData], [bName, bData]) => {\n    const aHasLB = aData.ライフバースト && aData.ライフバースト !== \"―\";\n    const bHasLB = bData.ライフバースト && bData.ライフバースト !== \"―\";\n    if (aHasLB === bHasLB) return 0;\n    return aHasLB ? -1 : 1;\n  });\n\n  return (\n    <div>\n      <div style={{ maxHeight: \"90vh\", overflowY: \"auto\", padding: \"1em\" }}>\n        <input\n          type=\"text\"\n          placeholder=\"検索...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyDown={(e) => e.key === \"Enter\" && handleSearch()}\n          style={{ margin: \"10px\", padding: \"5px\", width: \"80%\" }}\n        />\n        <button onClick={handleSearch} style={{ padding: \"6px 12px\", marginBottom: \"10px\" }}>\n          検索\n        </button>\n        <label style={{ marginLeft: \"10px\" }}>\n          <input\n            type=\"checkbox\"\n            checked={useRegex}\n            onChange={() => setUseRegex(!useRegex)}\n          /> 正規表現\n        </label>\n        <div style={{ margin: \"10px 0\" }}>\n          <strong>検索対象:</strong>\n          {fieldList.map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={searchFields[field]}\n                onChange={() => setSearchFields({ ...searchFields, [field]: !searchFields[field] })}\n              /> {fieldLabels[field] || field}\n            </label>\n          ))}\n        </div>\n        <div style={{ margin: \"10px 0\" }}>\n          <strong>表示項目:</strong>\n          {displayOrder.map((field) => (\n            <label key={field} style={{ marginLeft: \"10px\" }}>\n              <input\n                type=\"checkbox\"\n                checked={displayFields[field]}\n                onChange={() => toggleDisplayField(field)}\n              /> {fieldLabels[field] || field}\n            </label>\n          ))}\n        </div>\n        <table style={{ width: \"100%\", borderCollapse: \"collapse\", border: \"1px solid #ccc\" }}>\n          <thead>\n            <tr>\n              <th style={{ border: \"1px solid #ccc\" }}>{fieldLabels[\"カード名\"]}</th>\n              {displayOrder.filter(f => displayFields[f]).map((f, i) => (\n                <th key={i} style={{ border: \"1px solid #ccc\" }}>{fieldLabels[f] || f}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {filtered.map((card, index) => (\n              <tr key={index}>\n                <td\n                  style={{ border: \"1px solid #ccc\", cursor: \"pointer\" }}\n                  onClick={() => addToDeck(card)}\n                >\n                  {card[\"カード名\"]}\n                  <a\n                    href={`https://www.takaratomy.co.jp/products/wixoss/library/card/card_detail.php?card_no=${card[\"カード番号\"]}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ marginLeft: \"0.3em\", fontSize: \"0.8em\" }}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    ❔\n                  </a>\n                </td>\n                {displayOrder.filter(f => displayFields[f]).map((f, j) => (\n                  <td key={j} style={{ border: \"1px solid #ccc\" }}>{card[f]}</td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div style={{\n        position: \"fixed\",\n        bottom: \"20px\",\n        right: \"20px\",\n        background: \"#fff\",\n        border: \"1px solid #ccc\",\n        padding: \"1em\",\n        borderRadius: \"8px\",\n        width: \"300px\",\n        maxHeight: \"90vh\",\n        overflowY: \"auto\",\n        boxShadow: \"0 0 10px rgba(0,0,0,0.2)\",\n        textAlign: \"left\"\n      }}>\n        <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n          <h3 style={{ margin: 0 }}>\n            現在の{showMainDeck ? \"メインデッキ\" : \"ルリグデッキ\"}\n          </h3>\n          <div>\n            <button onClick={() => setShowMainDeck(!showMainDeck)} style={{ marginLeft: \"0.5em\" }}>\n              {showMainDeck ? \"ルリグ\" : \"メイン\"}\n            </button>\n            <button onClick={() => setMinimized(!minimized)} style={{ marginLeft: \"0.5em\" }}>\n              {minimized ? \"＋\" : \"－\"}\n            </button>\n          </div>\n        </div>\n        <p>\n          枚数: {totalCards}\n          {showMainDeck && ` / LB: ${totalLB}`}\n        </p>\n        {!minimized && (\n          sortedDeckEntries.length > 0 ? (\n            <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\n              {sortedDeckEntries.map(([name, data]) => (\n                <li\n                  key={name}\n                  style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\n                >\n                  <span>{data.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\n                  <span style={{ marginLeft: \"0.5em\", display: \"flex\", alignItems: \"center\" }}>\n                    {showMainDeck ? (\n                      <>\n                        <button onClick={() => adjustMainDeck(name, -1)} style={{ marginRight: \"4px\" }}>－</button>\n                        <span>×{data.count}</span>\n                        <button onClick={() => adjustMainDeck(name, 1)} style={{ marginLeft: \"4px\" }}>＋</button>\n                      </>\n                    ) : (\n                      <>\n                        <button onClick={() => removeFromLrigDeck(name)} style={{ marginRight: \"4px\" }}>－</button>\n                        <span>×{data.count}</span>\n                      </>\n                    )}\n                  </span>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>カードが追加されていません。</p>\n          )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export function filterCards(cards, keywords, fields, useRegex) {\r\n  const result = cards.filter((card) =>\r\n    keywords.every((kw) => {\r\n      try {\r\n        const regex = useRegex ? new RegExp(kw, \"i\") : null;\r\n        return fields.some((field) => {\r\n          const value = card[field] || \"\";\r\n          return useRegex\r\n            ? regex.test(value)\r\n            : value.toLowerCase().includes(kw.toLowerCase());\r\n        });\r\n      } catch (e) {\r\n        console.error(\"Invalid regex:\", kw);\r\n        return false;\r\n      }\r\n    })\r\n  );\r\n\r\n  const seen = new Set();\r\n  return result.filter((card) => {\r\n    if (seen.has(card[\"カード名\"])) return false;\r\n    seen.add(card[\"カード名\"]);\r\n    return true;\r\n  });\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}