{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","showModal","setShowModal","outputText","setOutputText","showImportModal","setShowImportModal","importText","setImportText","imageRef","useRef","toHiragana","arguments","length","undefined","replace","ch","String","fromCharCode","charCodeAt","fieldLabels","色","レベル","コスト","パワー","使用タイミング","isLrigCard","type","includes","useEffect","fetch","concat","process","Date","now","then","res","json","data","handleSearch","keywords","trim","split","filter","Boolean","activeFields","Object","keys","key","result","card","every","kw","normalizedKw","toLowerCase","regex","RegExp","some","field","raw","toString","hitName","reading","hitReading","test","seen","Set","unique","c","has","add","drawDeckOnTemplate","img","cardList","numList","canvas","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","font","fillStyle","x","y","i","text","Lrig","fillText","diff","LB","fromNLB","nLB","splice","console","log","lrigKeys","expandedLBList","expandedNLBList","lbList","flatMap","_ref","name","attr","Array","count","fill","_ref2","info","moveNLBs","_ref3","push","nlbList","_ref4","toDataURL","adjustDeck","cardName","delta","lb","isLrig","maxCount","prev","_prev$cardName","prevCount","newCount","Math","max","min","copy","_objectSpread","[object Object]","currentDeck","deckEntries","entries","totalCount","reduce","acc","_ref8","v","lbCount","_ref9","React","className","src","alt","placeholder","value","onChange","e","target","onKeyDown","onClick","FaSearch","checked","map","Fragment","id","toggleField","htmlFor","style","justifyContent","margin","fontSize","values","listStyle","paddingLeft","_ref0","display","alignItems","marginLeft","marginRight","disabled","opacity","handleAddSaba","find","alert","handleOutputClick","getCardNumbers","deck","_ref5","_cards$find","lrigList","mainList","lbCards","_ref6","nonLbCards","_ref7","fromEntries","nonLbList","all","join","openImageInNewTab","imageUrl","newTab","window","open","body","innerHTML","current","complete","onload","ref","cursor","href","rel","stopPropagation","marginTop","dangerouslySetInnerHTML","__html","position","top","left","right","bottom","backgroundColor","zIndex","padding","borderRadius","maxWidth","background","border","readOnly","whiteSpace","fontFamily","handleCopy","navigator","clipboard","writeText","catch","lines","line","newMain","newLrig","cardNumber","_target$name","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.24244a8e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [cards, setCards] = useState([]);\r\n  const [filtered, setFiltered] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [useRegex, setUseRegex] = useState(false);\r\n  const [searchFields, setSearchFields] = useState({\r\n    カード名: true,\r\n    効果テキスト: true,\r\n    ライフバースト: false,\r\n    カード種類: false,\r\n    カードタイプ: false,\r\n  });\r\n  const [deckMain, setDeckMain] = useState({});\r\n  const [deckLrig, setDeckLrig] = useState({});\r\n  const [showMainDeck, setShowMainDeck] = useState(true);\r\n  const [minimized, setMinimized] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [outputText, setOutputText] = useState(\"\");\r\n  const [showImportModal, setShowImportModal] = useState(false);\r\n  const [importText, setImportText] = useState(\"\");\r\n  const imageRef = useRef(null);\r\n\r\nconst toHiragana = (str = \"\") =>\r\n  str.replace(/[\\u30a1-\\u30f6]/g, ch =>\r\n    String.fromCharCode(ch.charCodeAt(0) - 0x60)\r\n  );\r\n\r\n  const fieldLabels = {\r\n    カード名: \"カード名\",\r\n    効果テキスト: \"効果テキスト\",\r\n    ライフバースト: \"LB\",\r\n    カード種類: \"種類\",\r\n    カードタイプ: \"タイプ\",\r\n    色: \"色\",\r\n    レベル: \"Lv\",\r\n    コスト: \"コスト\",\r\n    パワー: \"パワー\",\r\n    使用タイミング: \"タイミング\",\r\n  };\r\n\r\n  const isLrigCard = (type) =>\r\n    [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(type);\r\n\r\n  useEffect(() => {\r\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\r\n      .then((res) => res.json())\r\n      .then((data) => setCards(data));\r\n  }, []);\r\n\r\nconst handleSearch = () => {\r\n  const keywords = query.trim().split(/\\s+/).filter(Boolean);\r\n  const activeFields = Object.keys(searchFields).filter((key) => searchFields[key]);\r\n\r\n  const result = cards.filter((card) =>\r\n    keywords.every((kw) => {\r\n      const normalizedKw = toHiragana(kw.toLowerCase());\r\n      const regex = useRegex ? new RegExp(kw, \"i\") : null;\r\n\r\n      return activeFields.some((field) => {\r\n        const raw = (card[field] || \"\").toString();\r\n\r\n        // 「カード名」フィールドのときだけ、カード名＋読み方を両方チェック\r\n        if (field === \"カード名\" && !useRegex) {\r\n          // ① 元のカード名（部分一致、大文字小文字無視）\r\n          const hitName = raw.toLowerCase().includes(kw.toLowerCase());\r\n          // ② カードの読み方（カタカナ→ひらがな化して、ひらがな検索を可能に）\r\n          const reading = card[\"カードの読み方\"] || \"\";\r\n          const hira = toHiragana(reading.toLowerCase());\r\n          const hitReading = hira.includes(normalizedKw);\r\n          return hitName || hitReading;\r\n        }\r\n\r\n        // 正規表現モードなら、カード名／読み方いずれも regex.test でチェック\r\n        if (field === \"カード名\" && useRegex) {\r\n          const reading = card[\"カードの読み方\"] || \"\";\r\n          return regex.test(raw) || regex.test(reading);\r\n        }\r\n\r\n        // その他フィールドは従来通り\r\n        return useRegex\r\n          ? regex.test(raw)\r\n          : raw.toLowerCase().includes(kw.toLowerCase());\r\n      });\r\n    })\r\n  );\r\n\r\n  // 重複カード名を除いてセット\r\n  const seen = new Set();\r\n  const unique = result.filter((c) => {\r\n    if (seen.has(c[\"カード名\"])) return false;\r\n    seen.add(c[\"カード名\"]);\r\n    return true;\r\n  });\r\n  setFiltered(unique);\r\n};\r\n\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") handleSearch();\r\n  };\r\n\r\n  const toggleField = (field) => {\r\n    setSearchFields((prev) => ({ ...prev, [field]: !prev[field] }));\r\n  };\r\n\r\n  const drawDeckOnTemplate = (\r\n    img,\r\n    cardList,\r\n    numList\r\n  ) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = img.naturalWidth;\r\n    canvas.height = img.naturalHeight;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return null;\r\n\r\n    // 背景画像描画\r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n    \r\n    // テキスト設定\r\n    ctx.font = `16px sans-serif`;\r\n    ctx.fillStyle = \"black\";\r\n\r\n    const lineHeight = 46;\r\n\r\n    // ルリグデッキのカードナンバー描画\r\n    // 最初の6枚\r\n    let x = 200;\r\n    let y = 619;\r\n    for (let i = 0; i < 6; i++) {\r\n      const text = `${numList.Lrig[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の6枚\r\n    x = 875;\r\n    for (let i = 6; i < numList.Lrig.length; i++) {\r\n      const text = `${numList.Lrig[i]}`;\r\n      ctx.fillText(text, x, y + (i - 6) * lineHeight);\r\n    }\r\n\r\n    // LBのカードナンバー描画\r\n    const diff = 20 - numList.LB.length;\r\n    if (diff === 0){\r\n      // 最初の10枚\r\n      x = 200;\r\n      y = 1040;\r\n      for (let i = 0; i < 10; i++) {\r\n        const text = `${numList.LB[i]}`;\r\n        ctx.fillText(text, x, y + i * lineHeight);\r\n      }\r\n      // 次の10枚\r\n      x = 875;\r\n      for (let i = 10; i < 20; i++) {\r\n        const text = `${numList.LB[i]}`;\r\n        ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n      }\r\n    } else {\r\n      const fromNLB = numList.nLB.splice(0, diff);\r\n      numList.LB = numList.LB.concat(fromNLB);\r\n      console.log(numList.LB.length);\r\n      // 最初の10枚\r\n      x = 200;\r\n      y = 1040;\r\n      for (let i = 0; i < 10; i++) {\r\n        const text = `${numList.LB[i]}`;\r\n        ctx.fillText(text, x, y + i * lineHeight);\r\n      }\r\n      // 次の10枚\r\n      x = 875;\r\n      for (let i = 10; i < 20; i++) {\r\n        const text = `${numList.LB[i]}`;\r\n        ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n      }\r\n    }\r\n\r\n    // nLBのカードナンバー描画\r\n    // 最初の10枚\r\n    x = 200;\r\n    y = 1647;\r\n    for (let i = 0; i < 10; i++) {\r\n      const text = `${numList.nLB[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の10枚\r\n    x = 875;\r\n    for (let i = 10; i < 20; i++) {\r\n      const text = `${numList.nLB[i]}`;\r\n      ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n    }\r\n\r\n    // ルリグデッキのカード名描画\r\n    // 最初の6枚\r\n    x = 352;\r\n    y = 619;\r\n    const lrigKeys = Object.keys(cardList.Lrig);\r\n    for (let i = 0; i < 6; i++) {\r\n      const text = `${lrigKeys[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の6枚\r\n    x = 1026;\r\n    for (let i = 6; i < lrigKeys.length; i++) {\r\n      const text = `${lrigKeys[i]}`;\r\n      ctx.fillText(text, x, y + (i - 6) * lineHeight);\r\n    }\r\n\r\n    // メインデッキのLBカード名描画\r\n    // 最初の10枚\r\n    let expandedLBList = [];\r\n    let expandedNLBList = [];\r\n    if (diff === 0){\r\n      x = 450;\r\n      y = 1040;\r\n      const lbList = cardList.LB.flatMap(([name, attr]) => Array(attr.count).fill(name));\r\n      for (let i = 0; i < 10; i++) {\r\n        const text = `${lbList[i]}`;\r\n        ctx.fillText(text, x, y + i * lineHeight);\r\n      }\r\n      // 次の10枚\r\n      x = 1124;\r\n      for (let i = 10; i < lbList.length; i++) {\r\n        const text = `${lbList[i]}`;\r\n        ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n      }\r\n    } else {\r\n      x = 450;\r\n      y = 1040;\r\n      expandedLBList = cardList.LB.flatMap(([name, info]) =>\r\n        Array(info.count).fill([name, info])\r\n      );\r\n      expandedNLBList = cardList.nLB.flatMap(([name, info]) =>\r\n        Array(info.count).fill([name, info])\r\n      );\r\n      const moveNLBs = expandedNLBList.splice(0,diff);\r\n      expandedLBList.push(...moveNLBs);\r\n      for (let i = 0; i < 10; i++) {\r\n        const text = `${expandedLBList[i][0]}`;\r\n        ctx.fillText(text, x, y + i * lineHeight);\r\n        if (expandedLBList[i][1].ライフバースト === \"―\") {\r\n          ctx.fillText(\"✓\",x - 64,y + i * lineHeight,)\r\n        }\r\n      }\r\n      // 次の10枚\r\n      x = 1124;\r\n      for (let i = 10; i < expandedLBList.length; i++) {\r\n        const text = `${expandedLBList[i][0]}`;\r\n        ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n        if (expandedLBList[i][1].ライフバースト === \"―\") {\r\n          ctx.fillText(\"✓\",x - 64,y + (i - 10) * lineHeight,)\r\n        }\r\n      }\r\n    }\r\n\r\n    // メインデッキのnLBカード名描画\r\n    x = 352;\r\n    y = 1647;\r\n    if (diff === 0) {\r\n      // 最初の10枚\r\n      const nlbList = cardList.nLB.flatMap(([name, attr]) => Array(attr.count).fill(name));\r\n      for (let i = 0; i < 10; i++) {\r\n        const text = `${nlbList[i]}`;\r\n        ctx.fillText(text, x, y + i * lineHeight);\r\n      }\r\n      // 次の10枚\r\n      x = 1026;\r\n      for (let i = 10; i < nlbList.length; i++) {\r\n        const text = `${nlbList[i]}`;\r\n        ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < 10; i++) {\r\n        const text = `${expandedNLBList[i][0]}`;\r\n        ctx.fillText(text, x, y + i * lineHeight);\r\n      }\r\n      // 次の10枚\r\n      x = 1026;\r\n      for (let i = 10; i < expandedNLBList.length; i++) {\r\n        const text = `${expandedNLBList[i][0]}`;\r\n        ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n      }\r\n    }\r\n\r\n    return canvas.toDataURL(\"image/png\");\r\n  };\r\n\r\n  // デッキリストからカード名でカード番号を引き当てる関数\r\n  const handleOutputClick = () => {\r\n    const getCardNumbers = (deck) =>\r\n     Object.entries(deck).flatMap(([name, info]) =>\r\n        Array(info.count).fill(\r\n         cards.find((c) => c[\"カード名\"] === name)?.[\"カード番号\"] || \"UNKNOWN\"\r\n       )\r\n      );\r\n\r\n    // ルリグデッキのカード番号リスト取得\r\n    const lrigList = getCardNumbers(deckLrig);\r\n\r\n    const mainList = Object.entries(deckMain);\r\n    const lbCards = mainList.filter(([, info]) => info.ライフバースト && info.ライフバースト !== \"―\");\r\n    const nonLbCards = mainList.filter(([, info]) => !info.ライフバースト || info.ライフバースト === \"―\");\r\n\r\n    // メインデッキ・LBありのカード番号リスト取得\r\n    const lbList = getCardNumbers(Object.fromEntries(lbCards));\r\n    // メインデッキ・LBなしのカード番号リスト取得\r\n    const nonLbList = getCardNumbers(Object.fromEntries(nonLbCards));\r\n\r\n    const all = [...lrigList, ...lbList, ...nonLbList];\r\n    const cardList = {Lrig:deckLrig, LB:lbCards, nLB:nonLbCards};\r\n    const numList = {Lrig:lrigList, LB:lbList, nLB:nonLbList}\r\n\r\n    setOutputText(all.join(\"\\n\"));\r\n    setShowModal(true);\r\n\r\n    const openImageInNewTab = (imageUrl) => {\r\n      if (!imageUrl) return;\r\n      const newTab = window.open();\r\n      if (newTab) {\r\n        newTab.document.body.innerHTML = `<img src=\"${imageUrl}\" style=\"max-width:100%\">`;\r\n      } else {\r\n        alert(\"ポップアップブロックが有効かもしれません。\");\r\n      }\r\n    };\r\n    const img = imageRef.current;\r\n    if (!img) return;\r\n\r\n    if (!img.complete) {\r\n      img.onload = () => {\r\n      const imageUrl = drawDeckOnTemplate(img, cardList, numList);\r\n      openImageInNewTab(imageUrl);\r\n      };\r\n    } else {\r\n      const imageUrl = drawDeckOnTemplate(img, cardList, numList);\r\n      openImageInNewTab(imageUrl);\r\n    }\r\n  };\r\n\r\n  const handleAddSaba = () => {\r\n    const card = cards.find((c) => c[\"カード番号\"] === \"WXDi-D03-020\");\r\n    if (!card) {\r\n      alert(\"カード WXDi-D03-020 が見つかりませんでした。\");\r\n      return;\r\n    }\r\n\r\n    setDeckMain((prev) => ({\r\n      ...prev,\r\n      [card[\"カード名\"]]: {\r\n        count: 4,\r\n        ライフバースト: card[\"ライフバースト\"],\r\n        カード種類: card[\"カード種類\"]\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(outputText)\r\n    .then(() => {\r\n      alert(\"コピーしました！\");\r\n    })\r\n    .catch(() => {\r\n      alert(\"コピーに失敗しました。\");\r\n    });\r\n  };\r\n\r\n  const adjustDeck = (cardName, delta, type, lb) => {\r\n    const isLrig = isLrigCard(type);\r\n    const setDeck = isLrig ? setDeckLrig : setDeckMain;\r\n    const maxCount = isLrig ? 1 : 4;\r\n\r\n    setDeck((prev) => {\r\n      const prevCount = prev[cardName]?.count || 0;\r\n      const newCount = Math.max(0, Math.min(maxCount, prevCount + delta));\r\n      if (newCount === 0) {\r\n        const copy = { ...prev };\r\n        delete copy[cardName];\r\n        return copy;\r\n      }\r\n      return {\r\n        ...prev,\r\n        [cardName]: { count: newCount, ライフバースト: lb, カード種類: type },\r\n      };\r\n    });\r\n  };\r\n\r\n  const currentDeck = showMainDeck ? deckMain : deckLrig;\r\n  const deckEntries = Object.entries(currentDeck);\r\n  const totalCount = deckEntries.reduce((acc, [, v]) => acc + v.count, 0);\r\n  const lbCount = deckEntries.reduce(\r\n  (acc, [, v]) =>\r\n    (v.ライフバースト && v.ライフバースト !== \"―\") ? acc + v.count : acc,\r\n  0\r\n);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n      <div className=\"header-fixed\">\r\n        <h1><img src={`${process.env.PUBLIC_URL}/images/logo.png`} alt=\"WIXOSS カード検索\" className=\"logo\" /></h1>\r\n        <div className=\"search-row\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"検索...\"\r\n            value={query}\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n            className=\"search-textbox\"\r\n          />\r\n          <button onClick={handleSearch} className=\"search-button\"><FaSearch /></button>\r\n        </div>\r\n        <div>\r\n        <label className=\"toggle-regex\">\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={useRegex}\r\n            onChange={() => setUseRegex(!useRegex)}\r\n          /> 正規表現を使う\r\n        </label>\r\n        </div>\r\n\r\n        <div className=\"field-controls searchfield-check\">\r\n          {Object.keys(searchFields).map((field) => (\r\n            <>\r\n            <input\r\n                id={field}\r\n                type=\"checkbox\"\r\n                checked={searchFields[field]}\r\n                onChange={() => toggleField(field)}\r\n              />\r\n            <label key={field} htmlFor={field}className=\"searchfield-checkbox\">\r\n              {fieldLabels[field] || field}\r\n            </label>\r\n            </>\r\n          ))}\r\n        </div>\r\n        <div className=\"deck-box\">\r\n  <div className=\"deck-header\" style={{ justifyContent: minimized ? \"flex-end\" : \"space-between\" }}>\r\n    {!minimized && (\r\n      <h3>{showMainDeck ? \"現在のメインデッキ\" : \"現在のルリグデッキ\"}</h3>\r\n    )}\r\n    <div>\r\n      {!minimized && (\r\n        <button onClick={() => setShowMainDeck(!showMainDeck)} className=\"deck-toggle-button\">\r\n          {showMainDeck ? \"ルリグ\" : \"メイン\"}\r\n        </button>\r\n      )}\r\n      <button onClick={() => setMinimized(!minimized)}>\r\n        {minimized ? \"▲\" : \"▼\"}\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  {!minimized && (\r\n    <>\r\n      <p style={{ margin: 0, fontSize: \"1em\" }}>\r\n        {showMainDeck\r\n          ? `ルリグデッキ：${Object.values(deckLrig).reduce((acc, v) => acc + v.count, 0)}枚`\r\n          : `メインデッキ：${Object.values(deckMain).reduce((acc, v) => acc + v.count, 0)}枚`}\r\n      </p>\r\n      <p>枚数: {totalCount} {showMainDeck && `/ LB: ${lbCount}`}</p>\r\n      <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\r\n        {deckEntries.map(([name, info]) => (\r\n          <li\r\n            key={name}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <span>{info.ライフバースト && info.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\r\n            <span style={{ marginLeft: \"0.5em\", display: \"flex\", alignItems: \"center\" }}>\r\n              <button\r\n                onClick={() =>\r\n                  adjustDeck(name, -1, info.カード種類, info.ライフバースト)\r\n                }\r\n                style={{ marginRight: 4 }}\r\n              >\r\n                －\r\n              </button>\r\n              <span>×{info.count}</span>\r\n              {!isLrigCard(info.カード種類) && (\r\n                <button\r\n                  onClick={() =>\r\n                    adjustDeck(name, 1, info.カード種類, info.ライフバースト)\r\n                  }\r\n                  disabled={info.count >= 4}\r\n                  style={{ marginLeft: 4, opacity: info.count >= 4 ? 0.5 : 1 }}\r\n                >\r\n                  ＋\r\n                </button>\r\n              )}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n        <button onClick={handleAddSaba}>\r\n  鯖＃\r\n</button>\r\n        <button style={{ marginLeft: \"16px\" }} onClick={handleOutputClick}>\r\n        出力\r\n        </button>\r\n          <button style={{ marginLeft: \"8px\" }} onClick={() => setShowImportModal(true)}>\r\n  インポート\r\n</button>\r\n    </>\r\n  )}\r\n  <img ref={imageRef} src={`${process.env.PUBLIC_URL}/images/template.png`} style={{ display: 'none' }} />\r\n</div>\r\n      </div>\r\n\r\n      <div className=\"table-container search-result\">\r\n            {filtered.map((card, i) => (\r\n              <div key={i} className=\"card-item\"> \r\n                  <span\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() =>\r\n                      adjustDeck(\r\n                        card[\"カード名\"],\r\n                        1,\r\n                        card[\"カード種類\"],\r\n                        card[\"ライフバースト\"]\r\n                      )\r\n                    }\r\n                    className=\"cardname\"\r\n                  >\r\n                    {card[\"カード名\"]}\r\n                  </span>\r\n                  <a\r\n                    href={`https://www.takaratomy.co.jp/products/wixoss/library/card/card_detail.php?card_no=${card[\"カード番号\"]}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    style={{ marginLeft: \"0.3em\", fontSize: \"0.8em\" }}\r\n                    onClick={(e) => e.stopPropagation()}\r\n                  >\r\n                    ❔\r\n                  </a>\r\n                <div className=\"attr\" style={{ marginTop: \"0.3em\" }}>\r\n      <div className=\"row\">\r\n        <div className=\"type\"><strong>種類:</strong> {card[\"カード種類\"]}</div>\r\n        <div className=\"color\"><strong>色:</strong> {card[\"色\"]}</div>\r\n        <div><strong>レベル:</strong> {card[\"レベル\"]}</div>\r\n        <div><strong>コスト:</strong><span dangerouslySetInnerHTML={{\r\n            __html: (card[\"コスト\"] || \"\").replace(/<br>/g, \" \"),\r\n          }}></span></div>\r\n        <div><strong>パワー:</strong> {card[\"パワー\"]}</div>\r\n        <div><strong>タイプ:</strong><span dangerouslySetInnerHTML={{\r\n            __html: (card[\"カードタイプ\"] || \"\").replace(/<br>/g, \" \"),\r\n          }}></span></div>\r\n\r\n        <div><strong>タイミング:</strong><span dangerouslySetInnerHTML={{\r\n            __html: (card[\"使用タイミング\"] || \"\").replace(/<br>/g, \" \"),\r\n          }}></span></div>\r\n      </div>\r\n      <div className=\"LB\">\r\n        <div><strong>LB:</strong> {card[\"ライフバースト\"]}</div>\r\n      </div>\r\n      <div className=\"text\">\r\n        <span\r\n          dangerouslySetInnerHTML={{\r\n            __html: (card[\"効果テキスト\"] || \"\").replace(/\\n/g, \"<br>\"),\r\n          }}\r\n        />\r\n      </div>\r\n      </div>\r\n    </div>\r\n  ))}\r\n</div>\r\n\r\n\r\n{showModal && (\r\n  <div style={{\r\n    position: \"fixed\",\r\n    top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    zIndex: 1000\r\n  }}>\r\n    <div style={{\r\n      backgroundColor: \"white\",\r\n      padding: \"20px\",\r\n      borderRadius: \"8px\",\r\n      width: \"80%\",\r\n      maxWidth: \"500px\",\r\n      position: \"relative\"\r\n    }}>\r\n      <button onClick={() => setShowModal(false)} style={{\r\n        position: \"absolute\",\r\n        top: \"10px\",\r\n        right: \"10px\",\r\n        background: \"none\",\r\n        border: \"none\",\r\n        fontSize: \"1.2em\",\r\n        cursor: \"pointer\"\r\n      }}>×</button>\r\n      <h3>デッキ出力</h3>\r\n      <textarea\r\n        value={outputText}\r\n        readOnly\r\n        style={{ width: \"100%\", height: \"300px\", whiteSpace: \"pre\", fontFamily: \"monospace\" }}\r\n      />\r\n      <button\r\n  onClick={handleCopy}\r\n  style={{\r\n    marginTop: \"10px\",\r\n    padding: \"6px 12px\",\r\n    fontSize: \"1em\",\r\n    cursor: \"pointer\"\r\n  }}\r\n>\r\n  コピー\r\n</button>\r\n    </div>\r\n  </div>\r\n)}\r\n{showImportModal && (\r\n  <div style={{\r\n    position: \"fixed\",\r\n    top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    zIndex: 1000\r\n  }}>\r\n    <div style={{\r\n      backgroundColor: \"white\",\r\n      padding: \"20px\",\r\n      borderRadius: \"8px\",\r\n      width: \"80%\",\r\n      maxWidth: \"500px\",\r\n      position: \"relative\"\r\n    }}>\r\n      <button onClick={() => setShowImportModal(false)} style={{\r\n        position: \"absolute\",\r\n        top: \"10px\",\r\n        right: \"10px\",\r\n        background: \"none\",\r\n        border: \"none\",\r\n        fontSize: \"1.2em\",\r\n        cursor: \"pointer\"\r\n      }}>×</button>\r\n      <h3>デッキインポート</h3>\r\n      <textarea\r\n        value={importText}\r\n        onChange={(e) => setImportText(e.target.value)}\r\n        placeholder=\"カード番号を1行ずつ貼り付けてください\"\r\n        style={{ width: \"100%\", height: \"300px\", whiteSpace: \"pre\", fontFamily: \"monospace\" }}\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          const lines = importText\r\n            .split(/\\r?\\n/)\r\n            .map((line) => line.trim())\r\n            .filter(Boolean);\r\n\r\n          const newMain = {};\r\n          const newLrig = {};\r\n\r\n          for (const cardNumber of lines) {\r\n            const card = cards.find((c) => c[\"カード番号\"] === cardNumber);\r\n            if (!card) continue;\r\n\r\n            const name = card[\"カード名\"];\r\n            const isLrig = isLrigCard(card[\"カード種類\"]);\r\n\r\n            const target = isLrig ? newLrig : newMain;\r\n            const max = isLrig ? 1 : 4;\r\n            const prevCount = target[name]?.count || 0;\r\n            if (prevCount < max) {\r\n              target[name] = {\r\n                count: prevCount + 1,\r\n                ライフバースト: card[\"ライフバースト\"],\r\n                カード種類: card[\"カード種類\"]\r\n              };\r\n            }\r\n          }\r\n\r\n          setDeckMain(newMain);\r\n          setDeckLrig(newLrig);\r\n          setShowImportModal(false);\r\n        }}\r\n        style={{ marginTop: \"10px\", padding: \"6px 12px\", fontSize: \"1em\", cursor: \"pointer\" }}\r\n      >\r\n        読み込み\r\n      </button>\r\n    </div>\r\n  </div>\r\n)}\r\n\r\n\r\n</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}