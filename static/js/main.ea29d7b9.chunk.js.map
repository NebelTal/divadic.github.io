{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","displayFields","setDisplayFields","色","レベル","コスト","パワー","使用タイミング","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","showModal","setShowModal","outputText","setOutputText","showImportModal","setShowImportModal","importText","setImportText","imageRef","useRef","displayOrder","fieldLabels","isLrigCard","type","includes","useEffect","fetch","concat","process","Date","now","then","res","json","data","handleSearch","keywords","trim","split","filter","Boolean","activeFields","Object","keys","key","result","card","every","kw","regex","RegExp","some","field","value","test","toLowerCase","e","console","error","seen","Set","unique","c","has","add","drawDeckOnTemplate","img","cardList","numList","canvas","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","log","drawImage","font","fillStyle","x","y","i","text","Lrig","fillText","length","LB","nLB","lrigKeys","lbList","flatMap","_ref","name","attr","Array","count","fill","nlbList","_ref2","toDataURL","adjustDeck","cardName","delta","lb","isLrig","maxCount","prev","_prev$cardName","prevCount","newCount","Math","max","min","copy","_objectSpread","[object Object]","currentDeck","deckEntries","entries","totalCount","reduce","acc","_ref6","v","lbCount","_ref7","React","className","placeholder","onChange","target","onKeyDown","onClick","style","marginLeft","checked","handleAddSaba","find","alert","handleOutputClick","getCardNumbers","deck","_ref3","_cards$find","info","lrigList","mainList","lbCards","_ref4","nonLbCards","_ref5","fromEntries","nonLbList","all","join","openImageInNewTab","imageUrl","newTab","window","open","body","innerHTML","current","complete","onload","map","toggleField","toggleDisplayField","cursor","href","rel","fontSize","stopPropagation","dangerouslySetInnerHTML","__html","replace","justifyContent","Fragment","margin","values","listStyle","paddingLeft","_ref8","display","alignItems","marginRight","disabled","opacity","ref","src","position","top","left","right","bottom","backgroundColor","zIndex","padding","borderRadius","maxWidth","background","border","readOnly","whiteSpace","fontFamily","handleCopy","navigator","clipboard","writeText","catch","marginTop","lines","line","newMain","newLrig","cardNumber","_target$name","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ea29d7b9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [cards, setCards] = useState([]);\r\n  const [filtered, setFiltered] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [useRegex, setUseRegex] = useState(false);\r\n  const [searchFields, setSearchFields] = useState({\r\n    カード名: true,\r\n    効果テキスト: true,\r\n    ライフバースト: false,\r\n    カード種類: false,\r\n    カードタイプ: false,\r\n  });\r\n  const [displayFields, setDisplayFields] = useState({\r\n    カード種類: true,\r\n    カードタイプ: false,\r\n    色: false,\r\n    レベル: false,\r\n    コスト: false,\r\n    パワー: false,\r\n    効果テキスト: true,\r\n    ライフバースト: false,\r\n    使用タイミング: false,\r\n  });\r\n  const [deckMain, setDeckMain] = useState({});\r\n  const [deckLrig, setDeckLrig] = useState({});\r\n  const [showMainDeck, setShowMainDeck] = useState(true);\r\n  const [minimized, setMinimized] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [outputText, setOutputText] = useState(\"\");\r\n  const [showImportModal, setShowImportModal] = useState(false);\r\n  const [importText, setImportText] = useState(\"\");\r\n  const imageRef = useRef(null);\r\n\r\n\r\n  const displayOrder = [\r\n    \"カード種類\",\r\n    \"カードタイプ\",\r\n    \"色\",\r\n    \"レベル\",\r\n    \"コスト\",\r\n    \"パワー\",\r\n    \"効果テキスト\",\r\n    \"ライフバースト\",\r\n    \"使用タイミング\",\r\n  ];\r\n\r\n  const fieldLabels = {\r\n    カード名: \"カード名\",\r\n    効果テキスト: \"効果テキスト\",\r\n    ライフバースト: \"LB\",\r\n    カード種類: \"種類\",\r\n    カードタイプ: \"タイプ\",\r\n    色: \"色\",\r\n    レベル: \"Lv\",\r\n    コスト: \"コスト\",\r\n    パワー: \"パワー\",\r\n    使用タイミング: \"タイミング\",\r\n  };\r\n\r\n  const isLrigCard = (type) =>\r\n    [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(type);\r\n\r\n  useEffect(() => {\r\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\r\n      .then((res) => res.json())\r\n      .then((data) => setCards(data));\r\n  }, []);\r\n\r\n  const handleSearch = () => {\r\n    const keywords = query.trim().split(/\\s+/).filter(Boolean);\r\n    const activeFields = Object.keys(searchFields).filter((key) => searchFields[key]);\r\n\r\n    const result = cards.filter((card) =>\r\n      keywords.every((kw) => {\r\n        try {\r\n          const regex = useRegex ? new RegExp(kw, \"i\") : null;\r\n          return activeFields.some((field) => {\r\n            const value = card[field] || \"\";\r\n            return useRegex\r\n              ? regex.test(value)\r\n              : value.toLowerCase().includes(kw.toLowerCase());\r\n          });\r\n        } catch (e) {\r\n          console.error(\"Invalid regex:\", kw);\r\n          return false;\r\n        }\r\n      })\r\n    );\r\n\r\n    const seen = new Set();\r\n    const unique = result.filter((c) => {\r\n      if (seen.has(c[\"カード名\"])) return false;\r\n      seen.add(c[\"カード名\"]);\r\n      return true;\r\n    });\r\n\r\n    setFiltered(unique);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") handleSearch();\r\n  };\r\n\r\n  const toggleField = (field) => {\r\n    setSearchFields((prev) => ({ ...prev, [field]: !prev[field] }));\r\n  };\r\n\r\n  const drawDeckOnTemplate = (\r\n    img,\r\n    cardList,\r\n    numList\r\n  ) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = img.naturalWidth;\r\n    canvas.height = img.naturalHeight;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return null;\r\n\r\n    console.log(cardList);\r\n    console.log(numList);\r\n\r\n    // 背景画像描画\r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n    \r\n    // テキスト設定\r\n    ctx.font = `16px sans-serif`;\r\n    ctx.fillStyle = \"black\";\r\n\r\n    const lineHeight = 46;\r\n\r\n    // ルリグデッキのカードナンバー描画\r\n    // 最初の6枚\r\n    let x = 200;\r\n    let y = 619;\r\n    for (let i = 0; i < 6; i++) {\r\n      const text = `${numList.Lrig[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の6枚\r\n    x = 875;\r\n    for (let i = 6; i < numList.Lrig.length; i++) {\r\n      const text = `${numList.Lrig[i]}`;\r\n      ctx.fillText(text, x, y + (i - 6) * lineHeight);\r\n    }\r\n\r\n    // LBのカードナンバー描画\r\n    // 最初の10枚\r\n    x = 200;\r\n    y = 1040;\r\n    for (let i = 0; i < 10; i++) {\r\n      const text = `${numList.LB[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の10枚\r\n    x = 875;\r\n    for (let i = 10; i < 20; i++) {\r\n      const text = `${numList.LB[i]}`;\r\n      ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n    }\r\n\r\n    // nLBのカードナンバー描画\r\n    // 最初の10枚\r\n    x = 200;\r\n    y = 1647;\r\n    for (let i = 0; i < 10; i++) {\r\n      const text = `${numList.nLB[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の10枚\r\n    x = 875;\r\n    for (let i = 10; i < 20; i++) {\r\n      const text = `${numList.nLB[i]}`;\r\n      ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n    }\r\n\r\n    // ルリグデッキのカード名描画\r\n    // 最初の6枚\r\n    x = 352;\r\n    y = 619;\r\n    const lrigKeys = Object.keys(cardList.Lrig);\r\n    for (let i = 0; i < 6; i++) {\r\n      const text = `${lrigKeys[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の6枚\r\n    x = 1026;\r\n    for (let i = 6; i < lrigKeys.length; i++) {\r\n      const text = `${lrigKeys[i]}`;\r\n      ctx.fillText(text, x, y + (i - 6) * lineHeight);\r\n    }\r\n\r\n    // メインデッキのLBカード名描画\r\n    // 最初の10枚\r\n    x = 450;\r\n    y = 1040;\r\n    const lbList = cardList.LB.flatMap(([name, attr]) => Array(attr.count).fill(name));\r\n    for (let i = 0; i < 10; i++) {\r\n      const text = `${lbList[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の10枚\r\n    x = 1124;\r\n    for (let i = 10; i < lbList.length; i++) {\r\n      const text = `${lbList[i]}`;\r\n      ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n    }\r\n\r\n    // メインデッキのnLBカード名描画\r\n    // 最初の10枚\r\n    x = 352;\r\n    y = 1647;\r\n    const nlbList = cardList.nLB.flatMap(([name, attr]) => Array(attr.count).fill(name));\r\n    for (let i = 0; i < 10; i++) {\r\n      const text = `${nlbList[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の10枚\r\n    x = 1026;\r\n    for (let i = 10; i < nlbList.length; i++) {\r\n      const text = `${nlbList[i]}`;\r\n      ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n    }\r\n\r\n    return canvas.toDataURL(\"image/png\");\r\n  };\r\n\r\n  // デッキリストからカード名でカード番号を引き当てる関数\r\n  const handleOutputClick = () => {\r\n    const getCardNumbers = (deck) =>\r\n     Object.entries(deck).flatMap(([name, info]) =>\r\n        Array(info.count).fill(\r\n         cards.find((c) => c[\"カード名\"] === name)?.[\"カード番号\"] || \"UNKNOWN\"\r\n       )\r\n      );\r\n\r\n    // ルリグデッキのカード番号リスト取得\r\n    const lrigList = getCardNumbers(deckLrig);\r\n\r\n    const mainList = Object.entries(deckMain);\r\n    const lbCards = mainList.filter(([, info]) => info.ライフバースト && info.ライフバースト !== \"―\");\r\n    const nonLbCards = mainList.filter(([, info]) => !info.ライフバースト || info.ライフバースト === \"―\");\r\n\r\n    // メインデッキ・LBありのカード番号リスト取得\r\n    const lbList = getCardNumbers(Object.fromEntries(lbCards));\r\n    // メインデッキ・LBなしのカード番号リスト取得\r\n    const nonLbList = getCardNumbers(Object.fromEntries(nonLbCards));\r\n\r\n    const all = [...lrigList, ...lbList, ...nonLbList];\r\n    const cardList = {Lrig:deckLrig, LB:lbCards, nLB:nonLbCards};\r\n    const numList = {Lrig:lrigList, LB:lbList, nLB:nonLbList}\r\n\r\n    setOutputText(all.join(\"\\n\"));\r\n    setShowModal(true);\r\n\r\n    const openImageInNewTab = (imageUrl) => {\r\n      if (!imageUrl) return;\r\n      const newTab = window.open();\r\n      if (newTab) {\r\n        newTab.document.body.innerHTML = `<img src=\"${imageUrl}\" style=\"max-width:100%\">`;\r\n      } else {\r\n        alert(\"ポップアップブロックが有効かもしれません。\");\r\n      }\r\n    };\r\n    const img = imageRef.current;\r\n    if (!img) return;\r\n\r\n    if (!img.complete) {\r\n      img.onload = () => {\r\n      const imageUrl = drawDeckOnTemplate(img, cardList, numList);\r\n      openImageInNewTab(imageUrl);\r\n      };\r\n    } else {\r\n      const imageUrl = drawDeckOnTemplate(img, cardList, numList);\r\n      openImageInNewTab(imageUrl);\r\n    }\r\n  };\r\n\r\n  const handleAddSaba = () => {\r\n    const card = cards.find((c) => c[\"カード番号\"] === \"WXDi-D03-020\");\r\n    if (!card) {\r\n      alert(\"カード WXDi-D03-020 が見つかりませんでした。\");\r\n      return;\r\n    }\r\n\r\n    setDeckMain((prev) => ({\r\n      ...prev,\r\n      [card[\"カード名\"]]: {\r\n        count: 4,\r\n        ライフバースト: card[\"ライフバースト\"],\r\n        カード種類: card[\"カード種類\"]\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(outputText)\r\n    .then(() => {\r\n      alert(\"コピーしました！\");\r\n    })\r\n    .catch(() => {\r\n      alert(\"コピーに失敗しました。\");\r\n    });\r\n  };\r\n\r\n  const toggleDisplayField = (field) => {\r\n    setDisplayFields((prev) => ({ ...prev, [field]: !prev[field] }));\r\n  };\r\n\r\n  const adjustDeck = (cardName, delta, type, lb) => {\r\n    const isLrig = isLrigCard(type);\r\n    const setDeck = isLrig ? setDeckLrig : setDeckMain;\r\n    const deck = isLrig ? deckLrig : deckMain;\r\n    const maxCount = isLrig ? 1 : 4;\r\n\r\n    setDeck((prev) => {\r\n      const prevCount = prev[cardName]?.count || 0;\r\n      const newCount = Math.max(0, Math.min(maxCount, prevCount + delta));\r\n      if (newCount === 0) {\r\n        const copy = { ...prev };\r\n        delete copy[cardName];\r\n        return copy;\r\n      }\r\n      return {\r\n        ...prev,\r\n        [cardName]: { count: newCount, ライフバースト: lb, カード種類: type },\r\n      };\r\n    });\r\n  };\r\n\r\n  const currentDeck = showMainDeck ? deckMain : deckLrig;\r\n  const deckEntries = Object.entries(currentDeck);\r\n  const totalCount = deckEntries.reduce((acc, [, v]) => acc + v.count, 0);\r\n  const lbCount = deckEntries.reduce(\r\n  (acc, [, v]) =>\r\n    (v.ライフバースト && v.ライフバースト !== \"―\") ? acc + v.count : acc,\r\n  0\r\n);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header-fixed\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"検索...\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n        <button onClick={handleSearch}>検索</button>\r\n        <label style={{ marginLeft: \"10px\" }}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={useRegex}\r\n            onChange={() => setUseRegex(!useRegex)}\r\n          /> 正規表現\r\n        </label>\r\n<button style={{ marginLeft: \"16px\" }} onClick={handleAddSaba}>\r\n  鯖＃\r\n</button>\r\n        <button style={{ marginLeft: \"16px\" }} onClick={handleOutputClick}>\r\n        出力\r\n        </button>\r\n          <button style={{ marginLeft: \"8px\" }} onClick={() => setShowImportModal(true)}>\r\n  インポート\r\n</button>\r\n\r\n        <div className=\"field-controls\">\r\n          <strong>検索対象:</strong>\r\n          {Object.keys(searchFields).map((field) => (\r\n            <label key={field} style={{ marginLeft: \"10px\" }}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={searchFields[field]}\r\n                onChange={() => toggleField(field)}\r\n              /> {fieldLabels[field] || field}\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <div className=\"field-controls\">\r\n          <strong>表示項目:</strong>\r\n          {displayOrder.map((field) => (\r\n            <label key={field} style={{ marginLeft: \"10px\" }}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={displayFields[field]}\r\n                onChange={() => toggleDisplayField(field)}\r\n              /> {fieldLabels[field] || field}\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <table className=\"fixed-header-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>カード名</th>\r\n              {displayOrder\r\n                .filter((key) => displayFields[key])\r\n                .map((key) => (\r\n                  <th key={key}>{fieldLabels[key]}</th>\r\n                ))}\r\n            </tr>\r\n          </thead>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"table-container\">\r\n        <table className=\"fixed-header-table\">\r\n          <tbody>\r\n            {filtered.map((card, i) => (\r\n              <tr key={i}>\r\n                <td>\r\n                  <span\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() =>\r\n                      adjustDeck(\r\n                        card[\"カード名\"],\r\n                        1,\r\n                        card[\"カード種類\"],\r\n                        card[\"ライフバースト\"]\r\n                      )\r\n                    }\r\n                  >\r\n                    {card[\"カード名\"]}\r\n                  </span>\r\n                  <a\r\n                    href={`https://www.takaratomy.co.jp/products/wixoss/library/card/card_detail.php?card_no=${card[\"カード番号\"]}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    style={{ marginLeft: \"0.3em\", fontSize: \"0.8em\" }}\r\n                    onClick={(e) => e.stopPropagation()}\r\n                  >\r\n                    ❔\r\n                  </a>\r\n                </td>\r\n{displayOrder\r\n  .filter((key) => displayFields[key])\r\n  .map((key) => (\r\n    <td\r\n      key={key}\r\n      dangerouslySetInnerHTML={{\r\n        __html: (card[key] || \"\").replace(/\\n/g, \"<br>\")\r\n      }}\r\n    />\r\n  ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n<div className=\"deck-box\">\r\n  <div className=\"deck-header\" style={{ justifyContent: minimized ? \"flex-end\" : \"space-between\" }}>\r\n    {!minimized && (\r\n      <h3>{showMainDeck ? \"現在のメインデッキ\" : \"現在のルリグデッキ\"}</h3>\r\n    )}\r\n    <div>\r\n      {!minimized && (\r\n        <button onClick={() => setShowMainDeck(!showMainDeck)}>\r\n          {showMainDeck ? \"ルリグ\" : \"メイン\"}\r\n        </button>\r\n      )}\r\n      <button onClick={() => setMinimized(!minimized)}>\r\n        {minimized ? \"＋\" : \"－\"}\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  {!minimized && (\r\n    <>\r\n      <p style={{ margin: 0, fontSize: \"1em\" }}>\r\n        {showMainDeck\r\n          ? `ルリグデッキ：${Object.values(deckLrig).reduce((acc, v) => acc + v.count, 0)}枚`\r\n          : `メインデッキ：${Object.values(deckMain).reduce((acc, v) => acc + v.count, 0)}枚`}\r\n      </p>\r\n      <p>枚数: {totalCount} {showMainDeck && `/ LB: ${lbCount}`}</p>\r\n      <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\r\n        {deckEntries.map(([name, info]) => (\r\n          <li\r\n            key={name}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <span>{info.ライフバースト && info.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\r\n            <span style={{ marginLeft: \"0.5em\", display: \"flex\", alignItems: \"center\" }}>\r\n              <button\r\n                onClick={() =>\r\n                  adjustDeck(name, -1, info.カード種類, info.ライフバースト)\r\n                }\r\n                style={{ marginRight: 4 }}\r\n              >\r\n                －\r\n              </button>\r\n              <span>×{info.count}</span>\r\n              {!isLrigCard(info.カード種類) && (\r\n                <button\r\n                  onClick={() =>\r\n                    adjustDeck(name, 1, info.カード種類, info.ライフバースト)\r\n                  }\r\n                  disabled={info.count >= 4}\r\n                  style={{ marginLeft: 4, opacity: info.count >= 4 ? 0.5 : 1 }}\r\n                >\r\n                  ＋\r\n                </button>\r\n              )}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  )}\r\n  <img ref={imageRef} src=\"/template.png\" style={{ display: 'none' }} />\r\n</div>\r\n\r\n\r\n{showModal && (\r\n  <div style={{\r\n    position: \"fixed\",\r\n    top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    zIndex: 1000\r\n  }}>\r\n    <div style={{\r\n      backgroundColor: \"white\",\r\n      padding: \"20px\",\r\n      borderRadius: \"8px\",\r\n      width: \"80%\",\r\n      maxWidth: \"500px\",\r\n      position: \"relative\"\r\n    }}>\r\n      <button onClick={() => setShowModal(false)} style={{\r\n        position: \"absolute\",\r\n        top: \"10px\",\r\n        right: \"10px\",\r\n        background: \"none\",\r\n        border: \"none\",\r\n        fontSize: \"1.2em\",\r\n        cursor: \"pointer\"\r\n      }}>×</button>\r\n      <h3>デッキ出力</h3>\r\n      <textarea\r\n        value={outputText}\r\n        readOnly\r\n        style={{ width: \"100%\", height: \"300px\", whiteSpace: \"pre\", fontFamily: \"monospace\" }}\r\n      />\r\n      <button\r\n  onClick={handleCopy}\r\n  style={{\r\n    marginTop: \"10px\",\r\n    padding: \"6px 12px\",\r\n    fontSize: \"1em\",\r\n    cursor: \"pointer\"\r\n  }}\r\n>\r\n  コピー\r\n</button>\r\n    </div>\r\n  </div>\r\n)}\r\n{showImportModal && (\r\n  <div style={{\r\n    position: \"fixed\",\r\n    top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    zIndex: 1000\r\n  }}>\r\n    <div style={{\r\n      backgroundColor: \"white\",\r\n      padding: \"20px\",\r\n      borderRadius: \"8px\",\r\n      width: \"80%\",\r\n      maxWidth: \"500px\",\r\n      position: \"relative\"\r\n    }}>\r\n      <button onClick={() => setShowImportModal(false)} style={{\r\n        position: \"absolute\",\r\n        top: \"10px\",\r\n        right: \"10px\",\r\n        background: \"none\",\r\n        border: \"none\",\r\n        fontSize: \"1.2em\",\r\n        cursor: \"pointer\"\r\n      }}>×</button>\r\n      <h3>デッキインポート</h3>\r\n      <textarea\r\n        value={importText}\r\n        onChange={(e) => setImportText(e.target.value)}\r\n        placeholder=\"カード番号を1行ずつ貼り付けてください\"\r\n        style={{ width: \"100%\", height: \"300px\", whiteSpace: \"pre\", fontFamily: \"monospace\" }}\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          const lines = importText\r\n            .split(/\\r?\\n/)\r\n            .map((line) => line.trim())\r\n            .filter(Boolean);\r\n\r\n          const newMain = {};\r\n          const newLrig = {};\r\n\r\n          for (const cardNumber of lines) {\r\n            const card = cards.find((c) => c[\"カード番号\"] === cardNumber);\r\n            if (!card) continue;\r\n\r\n            const name = card[\"カード名\"];\r\n            const isLrig = isLrigCard(card[\"カード種類\"]);\r\n\r\n            const target = isLrig ? newLrig : newMain;\r\n            const max = isLrig ? 1 : 4;\r\n            const prevCount = target[name]?.count || 0;\r\n            if (prevCount < max) {\r\n              target[name] = {\r\n                count: prevCount + 1,\r\n                ライフバースト: card[\"ライフバースト\"],\r\n                カード種類: card[\"カード種類\"]\r\n              };\r\n            }\r\n          }\r\n\r\n          setDeckMain(newMain);\r\n          setDeckLrig(newLrig);\r\n          setShowImportModal(false);\r\n        }}\r\n        style={{ marginTop: \"10px\", padding: \"6px 12px\", fontSize: \"1em\", cursor: \"pointer\" }}\r\n      >\r\n        読み込み\r\n      </button>\r\n    </div>\r\n  </div>\r\n)}\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}