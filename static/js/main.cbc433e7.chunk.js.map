{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","adjustMainDeck","name","delta","prev","_updated$name","updated","_objectSpread","newCount","count","deck","totalCards","Object","values","reduce","sum","item","totalLB","ライフバースト","sortedDeckEntries","entries","sort","_ref","_ref2","aName","aData","bName","bData","aHasLB","React","createElement","style","maxHeight","overflowY","position","bottom","right","background","border","padding","borderRadius","width","height","boxShadow","textAlign","display","justifyContent","alignItems","onClick","marginLeft","Fragment","length","listStyle","paddingLeft","map","_ref3","data","key","marginRight","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.cbc433e7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [useRegex, setUseRegex] = useState(false);\n  const [deckMain, setDeckMain] = useState({});\n  const [deckLrig, setDeckLrig] = useState({});\n  const [showMainDeck, setShowMainDeck] = useState(true);\n  const [minimized, setMinimized] = useState(false);\n\n  const addToDeck = (card) => {\n    const isLrigDeckCard = [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(card[\"カード種類\"]);\n    const setDeck = isLrigDeckCard ? setDeckLrig : setDeckMain;\n    const deck = isLrigDeckCard ? deckLrig : deckMain;\n    const name = card[\"カード名\"];\n    const count = deck[name]?.count || 0;\n\n    if (isLrigDeckCard && count >= 1) return;\n    if (!isLrigDeckCard && count >= 4) return;\n\n    setDeck({\n      ...deck,\n      [name]: {\n        count: count + 1,\n        ライフバースト: card[\"ライフバースト\"],\n        カード種類: card[\"カード種類\"]\n      },\n    });\n  };\n\n  const adjustMainDeck = (name, delta) => {\n    setDeckMain((prev) => {\n      const updated = { ...prev };\n      const count = updated[name]?.count || 0;\n      const newCount = count + delta;\n      if (newCount > 0 && newCount <= 4) {\n        updated[name].count = newCount;\n      } else if (newCount <= 0) {\n        delete updated[name];\n      }\n      return updated;\n    });\n  };\n\n  const deck = showMainDeck ? deckMain : deckLrig;\n  const totalCards = Object.values(deck).reduce((sum, item) => sum + item.count, 0);\n  const totalLB = Object.values(deck).reduce(\n    (sum, item) => sum + (item.ライフバースト && item.ライフバースト !== \"―\" ? item.count : 0),\n    0\n  );\n\n  const sortedDeckEntries = Object.entries(deck).sort(([aName, aData], [bName, bData]) => {\n    const aHasLB = aData.ライフバースト && aData.ライフバースト !== \"―\";\n    const bHasLB = bData.ライフバースト && bData.ライフバースト !== \"―\";\n    if (aHasLB === bHasLB) return 0;\n    return aHasLB ? -1 : 1;\n  });\n\n  return (\n    <div>\n      <div style={{ maxHeight: \"70vh\", overflowY: \"auto\" }}>\n        {/* 検索フォームや検索結果テーブルなどはここに入る */}\n      </div>\n\n      <div style={{\n        position: \"fixed\",\n        bottom: \"20px\",\n        right: \"20px\",\n        background: \"#fff\",\n        border: \"1px solid #ccc\",\n        padding: \"1em\",\n        borderRadius: \"8px\",\n        width: \"300px\",\n        height: minimized ? \"auto\" : \"400px\",\n        overflowY: \"auto\",\n        boxShadow: \"0 0 10px rgba(0,0,0,0.2)\",\n        textAlign: \"left\"\n      }}>\n        <h3 style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\n          <span>\n            現在の{showMainDeck ? \"メインデッキ\" : \"ルリグデッキ\"}\n            <button onClick={() => setShowMainDeck(!showMainDeck)} style={{ marginLeft: \"0.5em\" }}>\n              {showMainDeck ? \"ルリグ\" : \"メイン\"}\n            </button>\n          </span>\n          <button onClick={() => setMinimized(!minimized)}>\n            {minimized ? \"＋\" : \"－\"}\n          </button>\n        </h3>\n        {!minimized && (\n          <>\n            {showMainDeck ? (\n              <p>枚数: {totalCards} / LB: {totalLB}</p>\n            ) : (\n              <p>枚数: {totalCards}</p>\n            )}\n            {sortedDeckEntries.length > 0 ? (\n              <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\n                {sortedDeckEntries.map(([name, data]) => (\n                  <li\n                    key={name}\n                    style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\n                  >\n                    <span>{data.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\n                    <span style={{ marginLeft: \"0.5em\", display: \"flex\", alignItems: \"center\" }}>\n                      {showMainDeck && (\n                        <>\n                          <button onClick={() => adjustMainDeck(name, -1)} style={{ marginRight: \"4px\" }}>－</button>\n                          <span>×{data.count}</span>\n                          <button onClick={() => adjustMainDeck(name, 1)} style={{ marginLeft: \"4px\" }}>＋</button>\n                        </>\n                      )}\n                      {!showMainDeck && <span>×{data.count}</span>}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p>カードが追加されていません。</p>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}