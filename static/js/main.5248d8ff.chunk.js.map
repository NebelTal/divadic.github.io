{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","cards","setCards","useState","filtered","setFiltered","query","setQuery","useRegex","setUseRegex","searchFields","setSearchFields","カード名","効果テキスト","ライフバースト","カード種類","カードタイプ","displayFields","setDisplayFields","色","レベル","コスト","パワー","使用タイミング","deckMain","setDeckMain","deckLrig","setDeckLrig","showMainDeck","setShowMainDeck","minimized","setMinimized","showModal","setShowModal","outputText","setOutputText","showImportModal","setShowImportModal","importText","setImportText","imageRef","useRef","fieldLabels","isLrigCard","type","includes","useEffect","fetch","concat","process","Date","now","then","res","json","data","handleSearch","keywords","trim","split","filter","Boolean","activeFields","Object","keys","key","result","card","every","kw","regex","RegExp","some","field","value","test","toLowerCase","e","console","error","seen","Set","unique","c","has","add","drawDeckOnTemplate","img","cardList","numList","canvas","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","font","fillStyle","x","y","i","text","Lrig","fillText","length","LB","nLB","lrigKeys","lbList","flatMap","_ref","name","attr","Array","count","fill","nlbList","_ref2","toDataURL","adjustDeck","cardName","delta","lb","isLrig","maxCount","prev","_prev$cardName","prevCount","newCount","Math","max","min","copy","_objectSpread","[object Object]","currentDeck","deckEntries","entries","totalCount","reduce","acc","_ref6","v","lbCount","_ref7","React","className","placeholder","onChange","target","onKeyDown","onClick","style","marginLeft","checked","handleAddSaba","find","alert","handleOutputClick","getCardNumbers","deck","_ref3","_cards$find","info","lrigList","mainList","lbCards","_ref4","nonLbCards","_ref5","fromEntries","nonLbList","all","join","openImageInNewTab","imageUrl","newTab","window","open","body","innerHTML","current","complete","onload","map","toggleField","toggleDisplayField","cursor","href","rel","fontSize","stopPropagation","marginTop","dangerouslySetInnerHTML","__html","replace","justifyContent","Fragment","margin","values","listStyle","paddingLeft","_ref8","display","alignItems","marginRight","disabled","opacity","ref","src","position","top","left","right","bottom","backgroundColor","zIndex","padding","borderRadius","maxWidth","background","border","readOnly","whiteSpace","fontFamily","handleCopy","navigator","clipboard","writeText","catch","lines","line","newMain","newLrig","cardNumber","_target$name","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5248d8ff.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [cards, setCards] = useState([]);\r\n  const [filtered, setFiltered] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [useRegex, setUseRegex] = useState(false);\r\n  const [searchFields, setSearchFields] = useState({\r\n    カード名: true,\r\n    効果テキスト: true,\r\n    ライフバースト: false,\r\n    カード種類: false,\r\n    カードタイプ: false,\r\n  });\r\n  const [displayFields, setDisplayFields] = useState({\r\n    カード種類: true,\r\n    カードタイプ: false,\r\n    色: false,\r\n    レベル: false,\r\n    コスト: false,\r\n    パワー: false,\r\n    効果テキスト: true,\r\n    ライフバースト: false,\r\n    使用タイミング: false,\r\n  });\r\n  const [deckMain, setDeckMain] = useState({});\r\n  const [deckLrig, setDeckLrig] = useState({});\r\n  const [showMainDeck, setShowMainDeck] = useState(true);\r\n  const [minimized, setMinimized] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [outputText, setOutputText] = useState(\"\");\r\n  const [showImportModal, setShowImportModal] = useState(false);\r\n  const [importText, setImportText] = useState(\"\");\r\n  const imageRef = useRef(null);\r\n\r\n\r\n  const displayOrder = [\r\n    \"カード種類\",\r\n    \"カードタイプ\",\r\n    \"色\",\r\n    \"レベル\",\r\n    \"コスト\",\r\n    \"パワー\",\r\n    \"効果テキスト\",\r\n    \"ライフバースト\",\r\n    \"使用タイミング\",\r\n  ];\r\n\r\n  const fieldLabels = {\r\n    カード名: \"カード名\",\r\n    効果テキスト: \"効果テキスト\",\r\n    ライフバースト: \"LB\",\r\n    カード種類: \"種類\",\r\n    カードタイプ: \"タイプ\",\r\n    色: \"色\",\r\n    レベル: \"Lv\",\r\n    コスト: \"コスト\",\r\n    パワー: \"パワー\",\r\n    使用タイミング: \"タイミング\",\r\n  };\r\n\r\n  const isLrigCard = (type) =>\r\n    [\"ルリグ\", \"アシストルリグ\", \"ピース\", \"アーツ\"].includes(type);\r\n\r\n  useEffect(() => {\r\n    fetch(`${process.env.PUBLIC_URL}/cards.json?t=${Date.now()}`)\r\n      .then((res) => res.json())\r\n      .then((data) => setCards(data));\r\n  }, []);\r\n\r\n  const handleSearch = () => {\r\n    const keywords = query.trim().split(/\\s+/).filter(Boolean);\r\n    const activeFields = Object.keys(searchFields).filter((key) => searchFields[key]);\r\n\r\n    const result = cards.filter((card) =>\r\n      keywords.every((kw) => {\r\n        try {\r\n          const regex = useRegex ? new RegExp(kw, \"i\") : null;\r\n          return activeFields.some((field) => {\r\n            const value = card[field] || \"\";\r\n            return useRegex\r\n              ? regex.test(value)\r\n              : value.toLowerCase().includes(kw.toLowerCase());\r\n          });\r\n        } catch (e) {\r\n          console.error(\"Invalid regex:\", kw);\r\n          return false;\r\n        }\r\n      })\r\n    );\r\n\r\n    const seen = new Set();\r\n    const unique = result.filter((c) => {\r\n      if (seen.has(c[\"カード名\"])) return false;\r\n      seen.add(c[\"カード名\"]);\r\n      return true;\r\n    });\r\n\r\n    setFiltered(unique);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") handleSearch();\r\n  };\r\n\r\n  const toggleField = (field) => {\r\n    setSearchFields((prev) => ({ ...prev, [field]: !prev[field] }));\r\n  };\r\n\r\n  const drawDeckOnTemplate = (\r\n    img,\r\n    cardList,\r\n    numList\r\n  ) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = img.naturalWidth;\r\n    canvas.height = img.naturalHeight;\r\n\r\n    const ctx = canvas.getContext(\"2d\");\r\n    if (!ctx) return null;\r\n\r\n    // 背景画像描画\r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n    \r\n    // テキスト設定\r\n    ctx.font = `16px sans-serif`;\r\n    ctx.fillStyle = \"black\";\r\n\r\n    const lineHeight = 46;\r\n\r\n    // ルリグデッキのカードナンバー描画\r\n    // 最初の6枚\r\n    let x = 200;\r\n    let y = 619;\r\n    for (let i = 0; i < 6; i++) {\r\n      const text = `${numList.Lrig[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の6枚\r\n    x = 875;\r\n    for (let i = 6; i < numList.Lrig.length; i++) {\r\n      const text = `${numList.Lrig[i]}`;\r\n      ctx.fillText(text, x, y + (i - 6) * lineHeight);\r\n    }\r\n\r\n    // LBのカードナンバー描画\r\n    // 最初の10枚\r\n    x = 200;\r\n    y = 1040;\r\n    for (let i = 0; i < 10; i++) {\r\n      const text = `${numList.LB[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の10枚\r\n    x = 875;\r\n    for (let i = 10; i < 20; i++) {\r\n      const text = `${numList.LB[i]}`;\r\n      ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n    }\r\n\r\n    // nLBのカードナンバー描画\r\n    // 最初の10枚\r\n    x = 200;\r\n    y = 1647;\r\n    for (let i = 0; i < 10; i++) {\r\n      const text = `${numList.nLB[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の10枚\r\n    x = 875;\r\n    for (let i = 10; i < 20; i++) {\r\n      const text = `${numList.nLB[i]}`;\r\n      ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n    }\r\n\r\n    // ルリグデッキのカード名描画\r\n    // 最初の6枚\r\n    x = 352;\r\n    y = 619;\r\n    const lrigKeys = Object.keys(cardList.Lrig);\r\n    for (let i = 0; i < 6; i++) {\r\n      const text = `${lrigKeys[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の6枚\r\n    x = 1026;\r\n    for (let i = 6; i < lrigKeys.length; i++) {\r\n      const text = `${lrigKeys[i]}`;\r\n      ctx.fillText(text, x, y + (i - 6) * lineHeight);\r\n    }\r\n\r\n    // メインデッキのLBカード名描画\r\n    // 最初の10枚\r\n    x = 450;\r\n    y = 1040;\r\n    const lbList = cardList.LB.flatMap(([name, attr]) => Array(attr.count).fill(name));\r\n    for (let i = 0; i < 10; i++) {\r\n      const text = `${lbList[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の10枚\r\n    x = 1124;\r\n    for (let i = 10; i < lbList.length; i++) {\r\n      const text = `${lbList[i]}`;\r\n      ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n    }\r\n\r\n    // メインデッキのnLBカード名描画\r\n    // 最初の10枚\r\n    x = 352;\r\n    y = 1647;\r\n    const nlbList = cardList.nLB.flatMap(([name, attr]) => Array(attr.count).fill(name));\r\n    for (let i = 0; i < 10; i++) {\r\n      const text = `${nlbList[i]}`;\r\n      ctx.fillText(text, x, y + i * lineHeight);\r\n    }\r\n    // 次の10枚\r\n    x = 1026;\r\n    for (let i = 10; i < nlbList.length; i++) {\r\n      const text = `${nlbList[i]}`;\r\n      ctx.fillText(text, x, y + (i - 10) * lineHeight);\r\n    }\r\n\r\n    return canvas.toDataURL(\"image/png\");\r\n  };\r\n\r\n  // デッキリストからカード名でカード番号を引き当てる関数\r\n  const handleOutputClick = () => {\r\n    const getCardNumbers = (deck) =>\r\n     Object.entries(deck).flatMap(([name, info]) =>\r\n        Array(info.count).fill(\r\n         cards.find((c) => c[\"カード名\"] === name)?.[\"カード番号\"] || \"UNKNOWN\"\r\n       )\r\n      );\r\n\r\n    // ルリグデッキのカード番号リスト取得\r\n    const lrigList = getCardNumbers(deckLrig);\r\n\r\n    const mainList = Object.entries(deckMain);\r\n    const lbCards = mainList.filter(([, info]) => info.ライフバースト && info.ライフバースト !== \"―\");\r\n    const nonLbCards = mainList.filter(([, info]) => !info.ライフバースト || info.ライフバースト === \"―\");\r\n\r\n    // メインデッキ・LBありのカード番号リスト取得\r\n    const lbList = getCardNumbers(Object.fromEntries(lbCards));\r\n    // メインデッキ・LBなしのカード番号リスト取得\r\n    const nonLbList = getCardNumbers(Object.fromEntries(nonLbCards));\r\n\r\n    const all = [...lrigList, ...lbList, ...nonLbList];\r\n    const cardList = {Lrig:deckLrig, LB:lbCards, nLB:nonLbCards};\r\n    const numList = {Lrig:lrigList, LB:lbList, nLB:nonLbList}\r\n\r\n    setOutputText(all.join(\"\\n\"));\r\n    setShowModal(true);\r\n\r\n    const openImageInNewTab = (imageUrl) => {\r\n      if (!imageUrl) return;\r\n      const newTab = window.open();\r\n      if (newTab) {\r\n        newTab.document.body.innerHTML = `<img src=\"${imageUrl}\" style=\"max-width:100%\">`;\r\n      } else {\r\n        alert(\"ポップアップブロックが有効かもしれません。\");\r\n      }\r\n    };\r\n    const img = imageRef.current;\r\n    if (!img) return;\r\n\r\n    if (!img.complete) {\r\n      img.onload = () => {\r\n      const imageUrl = drawDeckOnTemplate(img, cardList, numList);\r\n      openImageInNewTab(imageUrl);\r\n      };\r\n    } else {\r\n      const imageUrl = drawDeckOnTemplate(img, cardList, numList);\r\n      openImageInNewTab(imageUrl);\r\n    }\r\n  };\r\n\r\n  const handleAddSaba = () => {\r\n    const card = cards.find((c) => c[\"カード番号\"] === \"WXDi-D03-020\");\r\n    if (!card) {\r\n      alert(\"カード WXDi-D03-020 が見つかりませんでした。\");\r\n      return;\r\n    }\r\n\r\n    setDeckMain((prev) => ({\r\n      ...prev,\r\n      [card[\"カード名\"]]: {\r\n        count: 4,\r\n        ライフバースト: card[\"ライフバースト\"],\r\n        カード種類: card[\"カード種類\"]\r\n      }\r\n    }));\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(outputText)\r\n    .then(() => {\r\n      alert(\"コピーしました！\");\r\n    })\r\n    .catch(() => {\r\n      alert(\"コピーに失敗しました。\");\r\n    });\r\n  };\r\n\r\n  const toggleDisplayField = (field) => {\r\n    setDisplayFields((prev) => ({ ...prev, [field]: !prev[field] }));\r\n  };\r\n\r\n  const adjustDeck = (cardName, delta, type, lb) => {\r\n    const isLrig = isLrigCard(type);\r\n    const setDeck = isLrig ? setDeckLrig : setDeckMain;\r\n    const deck = isLrig ? deckLrig : deckMain;\r\n    const maxCount = isLrig ? 1 : 4;\r\n\r\n    setDeck((prev) => {\r\n      const prevCount = prev[cardName]?.count || 0;\r\n      const newCount = Math.max(0, Math.min(maxCount, prevCount + delta));\r\n      if (newCount === 0) {\r\n        const copy = { ...prev };\r\n        delete copy[cardName];\r\n        return copy;\r\n      }\r\n      return {\r\n        ...prev,\r\n        [cardName]: { count: newCount, ライフバースト: lb, カード種類: type },\r\n      };\r\n    });\r\n  };\r\n\r\n  const currentDeck = showMainDeck ? deckMain : deckLrig;\r\n  const deckEntries = Object.entries(currentDeck);\r\n  const totalCount = deckEntries.reduce((acc, [, v]) => acc + v.count, 0);\r\n  const lbCount = deckEntries.reduce(\r\n  (acc, [, v]) =>\r\n    (v.ライフバースト && v.ライフバースト !== \"―\") ? acc + v.count : acc,\r\n  0\r\n);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header><h1>WIXOSS カード検索</h1></header>\r\n      <div className=\"container\">\r\n      <div className=\"header-fixed\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"検索...\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n        <button onClick={handleSearch}>検索</button>\r\n        <label style={{ marginLeft: \"10px\" }}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={useRegex}\r\n            onChange={() => setUseRegex(!useRegex)}\r\n          /> 正規表現\r\n        </label>\r\n<button style={{ marginLeft: \"16px\" }} onClick={handleAddSaba}>\r\n  鯖＃\r\n</button>\r\n        <button style={{ marginLeft: \"16px\" }} onClick={handleOutputClick}>\r\n        出力\r\n        </button>\r\n          <button style={{ marginLeft: \"8px\" }} onClick={() => setShowImportModal(true)}>\r\n  インポート\r\n</button>\r\n\r\n        <div className=\"field-controls\">\r\n          <strong>検索対象:</strong>\r\n          {Object.keys(searchFields).map((field) => (\r\n            <label key={field} style={{ marginLeft: \"10px\" }}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={searchFields[field]}\r\n                onChange={() => toggleField(field)}\r\n              /> {fieldLabels[field] || field}\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <div className=\"field-controls\">\r\n          <strong>表示項目:</strong>\r\n          {displayOrder.map((field) => (\r\n            <label key={field} style={{ marginLeft: \"10px\" }}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={displayFields[field]}\r\n                onChange={() => toggleDisplayField(field)}\r\n              /> {fieldLabels[field] || field}\r\n            </label>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"table-container search-result\">\r\n            {filtered.map((card, i) => (\r\n              <div key={i} className=\"card-item\"> \r\n                  <span\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() =>\r\n                      adjustDeck(\r\n                        card[\"カード名\"],\r\n                        1,\r\n                        card[\"カード種類\"],\r\n                        card[\"ライフバースト\"]\r\n                      )\r\n                    }\r\n                    className=\"cardname\"\r\n                  >\r\n                    {card[\"カード名\"]}\r\n                  </span>\r\n                  <a\r\n                    href={`https://www.takaratomy.co.jp/products/wixoss/library/card/card_detail.php?card_no=${card[\"カード番号\"]}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    style={{ marginLeft: \"0.3em\", fontSize: \"0.8em\" }}\r\n                    onClick={(e) => e.stopPropagation()}\r\n                  >\r\n                    ❔\r\n                  </a>\r\n                <div className=\"attr\" style={{ marginTop: \"0.3em\" }}>\r\n      <div className=\"row\">\r\n        <div className=\"type\"><strong>種類:</strong> {card[\"カード種類\"]}</div>\r\n        <div className=\"color\"><strong>色:</strong> {card[\"色\"]}</div>\r\n        <div><strong>レベル:</strong> {card[\"レベル\"]}</div>\r\n        <div><strong>コスト:</strong><span dangerouslySetInnerHTML={{\r\n            __html: (card[\"コスト\"] || \"\").replace(/<br>/g, \" \"),\r\n          }}></span></div>\r\n        <div><strong>パワー:</strong> {card[\"パワー\"]}</div>\r\n        <div><strong>タイプ:</strong><span dangerouslySetInnerHTML={{\r\n            __html: (card[\"カードタイプ\"] || \"\").replace(/<br>/g, \" \"),\r\n          }}></span></div>\r\n\r\n        <div><strong>タイミング:</strong><span dangerouslySetInnerHTML={{\r\n            __html: (card[\"使用タイミング\"] || \"\").replace(/<br>/g, \" \"),\r\n          }}></span></div>\r\n      </div>\r\n      <div className=\"LB\">\r\n        <div><strong>LB:</strong> {card[\"ライフバースト\"]}</div>\r\n      </div>\r\n      <div className=\"text\">\r\n        <span\r\n          dangerouslySetInnerHTML={{\r\n            __html: (card[\"効果テキスト\"] || \"\").replace(/\\n/g, \"<br>\"),\r\n          }}\r\n        />\r\n      </div>\r\n      </div>\r\n    </div>\r\n  ))}\r\n</div>\r\n\r\n<div className=\"deck-box\">\r\n  <div className=\"deck-header\" style={{ justifyContent: minimized ? \"flex-end\" : \"space-between\" }}>\r\n    {!minimized && (\r\n      <h3>{showMainDeck ? \"現在のメインデッキ\" : \"現在のルリグデッキ\"}</h3>\r\n    )}\r\n    <div>\r\n      {!minimized && (\r\n        <button onClick={() => setShowMainDeck(!showMainDeck)} className=\"deck-toggle-button\">\r\n          {showMainDeck ? \"ルリグ\" : \"メイン\"}\r\n        </button>\r\n      )}\r\n      <button onClick={() => setMinimized(!minimized)}>\r\n        {minimized ? \"▲\" : \"▼\"}\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  {!minimized && (\r\n    <>\r\n      <p style={{ margin: 0, fontSize: \"1em\" }}>\r\n        {showMainDeck\r\n          ? `ルリグデッキ：${Object.values(deckLrig).reduce((acc, v) => acc + v.count, 0)}枚`\r\n          : `メインデッキ：${Object.values(deckMain).reduce((acc, v) => acc + v.count, 0)}枚`}\r\n      </p>\r\n      <p>枚数: {totalCount} {showMainDeck && `/ LB: ${lbCount}`}</p>\r\n      <ul style={{ listStyle: \"none\", paddingLeft: 0 }}>\r\n        {deckEntries.map(([name, info]) => (\r\n          <li\r\n            key={name}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <span>{info.ライフバースト && info.ライフバースト !== \"―\" ? \"★\" : \"\"}{name}</span>\r\n            <span style={{ marginLeft: \"0.5em\", display: \"flex\", alignItems: \"center\" }}>\r\n              <button\r\n                onClick={() =>\r\n                  adjustDeck(name, -1, info.カード種類, info.ライフバースト)\r\n                }\r\n                style={{ marginRight: 4 }}\r\n              >\r\n                －\r\n              </button>\r\n              <span>×{info.count}</span>\r\n              {!isLrigCard(info.カード種類) && (\r\n                <button\r\n                  onClick={() =>\r\n                    adjustDeck(name, 1, info.カード種類, info.ライフバースト)\r\n                  }\r\n                  disabled={info.count >= 4}\r\n                  style={{ marginLeft: 4, opacity: info.count >= 4 ? 0.5 : 1 }}\r\n                >\r\n                  ＋\r\n                </button>\r\n              )}\r\n            </span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  )}\r\n  <img ref={imageRef} src={`${process.env.PUBLIC_URL}/images/template.png`} style={{ display: 'none' }} />\r\n</div>\r\n\r\n\r\n{showModal && (\r\n  <div style={{\r\n    position: \"fixed\",\r\n    top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    zIndex: 1000\r\n  }}>\r\n    <div style={{\r\n      backgroundColor: \"white\",\r\n      padding: \"20px\",\r\n      borderRadius: \"8px\",\r\n      width: \"80%\",\r\n      maxWidth: \"500px\",\r\n      position: \"relative\"\r\n    }}>\r\n      <button onClick={() => setShowModal(false)} style={{\r\n        position: \"absolute\",\r\n        top: \"10px\",\r\n        right: \"10px\",\r\n        background: \"none\",\r\n        border: \"none\",\r\n        fontSize: \"1.2em\",\r\n        cursor: \"pointer\"\r\n      }}>×</button>\r\n      <h3>デッキ出力</h3>\r\n      <textarea\r\n        value={outputText}\r\n        readOnly\r\n        style={{ width: \"100%\", height: \"300px\", whiteSpace: \"pre\", fontFamily: \"monospace\" }}\r\n      />\r\n      <button\r\n  onClick={handleCopy}\r\n  style={{\r\n    marginTop: \"10px\",\r\n    padding: \"6px 12px\",\r\n    fontSize: \"1em\",\r\n    cursor: \"pointer\"\r\n  }}\r\n>\r\n  コピー\r\n</button>\r\n    </div>\r\n  </div>\r\n)}\r\n{showImportModal && (\r\n  <div style={{\r\n    position: \"fixed\",\r\n    top: 0, left: 0, right: 0, bottom: 0,\r\n    backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    zIndex: 1000\r\n  }}>\r\n    <div style={{\r\n      backgroundColor: \"white\",\r\n      padding: \"20px\",\r\n      borderRadius: \"8px\",\r\n      width: \"80%\",\r\n      maxWidth: \"500px\",\r\n      position: \"relative\"\r\n    }}>\r\n      <button onClick={() => setShowImportModal(false)} style={{\r\n        position: \"absolute\",\r\n        top: \"10px\",\r\n        right: \"10px\",\r\n        background: \"none\",\r\n        border: \"none\",\r\n        fontSize: \"1.2em\",\r\n        cursor: \"pointer\"\r\n      }}>×</button>\r\n      <h3>デッキインポート</h3>\r\n      <textarea\r\n        value={importText}\r\n        onChange={(e) => setImportText(e.target.value)}\r\n        placeholder=\"カード番号を1行ずつ貼り付けてください\"\r\n        style={{ width: \"100%\", height: \"300px\", whiteSpace: \"pre\", fontFamily: \"monospace\" }}\r\n      />\r\n      <button\r\n        onClick={() => {\r\n          const lines = importText\r\n            .split(/\\r?\\n/)\r\n            .map((line) => line.trim())\r\n            .filter(Boolean);\r\n\r\n          const newMain = {};\r\n          const newLrig = {};\r\n\r\n          for (const cardNumber of lines) {\r\n            const card = cards.find((c) => c[\"カード番号\"] === cardNumber);\r\n            if (!card) continue;\r\n\r\n            const name = card[\"カード名\"];\r\n            const isLrig = isLrigCard(card[\"カード種類\"]);\r\n\r\n            const target = isLrig ? newLrig : newMain;\r\n            const max = isLrig ? 1 : 4;\r\n            const prevCount = target[name]?.count || 0;\r\n            if (prevCount < max) {\r\n              target[name] = {\r\n                count: prevCount + 1,\r\n                ライフバースト: card[\"ライフバースト\"],\r\n                カード種類: card[\"カード種類\"]\r\n              };\r\n            }\r\n          }\r\n\r\n          setDeckMain(newMain);\r\n          setDeckLrig(newLrig);\r\n          setShowImportModal(false);\r\n        }}\r\n        style={{ marginTop: \"10px\", padding: \"6px 12px\", fontSize: \"1em\", cursor: \"pointer\" }}\r\n      >\r\n        読み込み\r\n      </button>\r\n    </div>\r\n  </div>\r\n)}\r\n\r\n\r\n</div>\r\n<footer>nebelTal</footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}